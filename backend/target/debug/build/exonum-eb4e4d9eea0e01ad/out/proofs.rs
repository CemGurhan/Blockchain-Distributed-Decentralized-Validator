// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `exonum/proofs.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct BlockProof {
    // message fields
    pub block: ::protobuf::SingularPtrField<super::blockchain::Block>,
    pub precommits: ::protobuf::RepeatedField<super::messages::SignedMessage>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BlockProof {
    fn default() -> &'a BlockProof {
        <BlockProof as ::protobuf::Message>::default_instance()
    }
}

impl BlockProof {
    pub fn new() -> BlockProof {
        ::std::default::Default::default()
    }

    // .exonum.Block block = 1;


    pub fn get_block(&self) -> &super::blockchain::Block {
        self.block.as_ref().unwrap_or_else(|| <super::blockchain::Block as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: super::blockchain::Block) {
        self.block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut super::blockchain::Block {
        if self.block.is_none() {
            self.block.set_default();
        }
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> super::blockchain::Block {
        self.block.take().unwrap_or_else(|| super::blockchain::Block::new())
    }

    // repeated .exonum.SignedMessage precommits = 2;


    pub fn get_precommits(&self) -> &[super::messages::SignedMessage] {
        &self.precommits
    }
    pub fn clear_precommits(&mut self) {
        self.precommits.clear();
    }

    // Param is passed by value, moved
    pub fn set_precommits(&mut self, v: ::protobuf::RepeatedField<super::messages::SignedMessage>) {
        self.precommits = v;
    }

    // Mutable pointer to the field.
    pub fn mut_precommits(&mut self) -> &mut ::protobuf::RepeatedField<super::messages::SignedMessage> {
        &mut self.precommits
    }

    // Take field
    pub fn take_precommits(&mut self) -> ::protobuf::RepeatedField<super::messages::SignedMessage> {
        ::std::mem::replace(&mut self.precommits, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for BlockProof {
    fn is_initialized(&self) -> bool {
        for v in &self.block {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.precommits {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.precommits)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.precommits {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.block.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.precommits {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockProof {
        BlockProof::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::blockchain::Block>>(
                "block",
                |m: &BlockProof| { &m.block },
                |m: &mut BlockProof| { &mut m.block },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::messages::SignedMessage>>(
                "precommits",
                |m: &BlockProof| { &m.precommits },
                |m: &mut BlockProof| { &mut m.precommits },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BlockProof>(
                "BlockProof",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BlockProof {
        static instance: ::protobuf::rt::LazyV2<BlockProof> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BlockProof::new)
    }
}

impl ::protobuf::Clear for BlockProof {
    fn clear(&mut self) {
        self.block.clear();
        self.precommits.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockProof {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct IndexProof {
    // message fields
    pub block_proof: ::protobuf::SingularPtrField<BlockProof>,
    pub index_proof: ::protobuf::SingularPtrField<super::map_proof::MapProof>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IndexProof {
    fn default() -> &'a IndexProof {
        <IndexProof as ::protobuf::Message>::default_instance()
    }
}

impl IndexProof {
    pub fn new() -> IndexProof {
        ::std::default::Default::default()
    }

    // .exonum.BlockProof block_proof = 1;


    pub fn get_block_proof(&self) -> &BlockProof {
        self.block_proof.as_ref().unwrap_or_else(|| <BlockProof as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block_proof(&mut self) {
        self.block_proof.clear();
    }

    pub fn has_block_proof(&self) -> bool {
        self.block_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block_proof(&mut self, v: BlockProof) {
        self.block_proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_proof(&mut self) -> &mut BlockProof {
        if self.block_proof.is_none() {
            self.block_proof.set_default();
        }
        self.block_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_block_proof(&mut self) -> BlockProof {
        self.block_proof.take().unwrap_or_else(|| BlockProof::new())
    }

    // .exonum.proof.MapProof index_proof = 2;


    pub fn get_index_proof(&self) -> &super::map_proof::MapProof {
        self.index_proof.as_ref().unwrap_or_else(|| <super::map_proof::MapProof as ::protobuf::Message>::default_instance())
    }
    pub fn clear_index_proof(&mut self) {
        self.index_proof.clear();
    }

    pub fn has_index_proof(&self) -> bool {
        self.index_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_index_proof(&mut self, v: super::map_proof::MapProof) {
        self.index_proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_index_proof(&mut self) -> &mut super::map_proof::MapProof {
        if self.index_proof.is_none() {
            self.index_proof.set_default();
        }
        self.index_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_index_proof(&mut self) -> super::map_proof::MapProof {
        self.index_proof.take().unwrap_or_else(|| super::map_proof::MapProof::new())
    }
}

impl ::protobuf::Message for IndexProof {
    fn is_initialized(&self) -> bool {
        for v in &self.block_proof {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.index_proof {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block_proof)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.index_proof)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.block_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.index_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.block_proof.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.index_proof.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IndexProof {
        IndexProof::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BlockProof>>(
                "block_proof",
                |m: &IndexProof| { &m.block_proof },
                |m: &mut IndexProof| { &mut m.block_proof },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::map_proof::MapProof>>(
                "index_proof",
                |m: &IndexProof| { &m.index_proof },
                |m: &mut IndexProof| { &mut m.index_proof },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<IndexProof>(
                "IndexProof",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static IndexProof {
        static instance: ::protobuf::rt::LazyV2<IndexProof> = ::protobuf::rt::LazyV2::INIT;
        instance.get(IndexProof::new)
    }
}

impl ::protobuf::Clear for IndexProof {
    fn clear(&mut self) {
        self.block_proof.clear();
        self.index_proof.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IndexProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IndexProof {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct CallProof {
    // message fields
    pub block_proof: ::protobuf::SingularPtrField<BlockProof>,
    pub call_proof: ::protobuf::SingularPtrField<super::map_proof::MapProof>,
    pub error_description: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CallProof {
    fn default() -> &'a CallProof {
        <CallProof as ::protobuf::Message>::default_instance()
    }
}

impl CallProof {
    pub fn new() -> CallProof {
        ::std::default::Default::default()
    }

    // .exonum.BlockProof block_proof = 1;


    pub fn get_block_proof(&self) -> &BlockProof {
        self.block_proof.as_ref().unwrap_or_else(|| <BlockProof as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block_proof(&mut self) {
        self.block_proof.clear();
    }

    pub fn has_block_proof(&self) -> bool {
        self.block_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block_proof(&mut self, v: BlockProof) {
        self.block_proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_proof(&mut self) -> &mut BlockProof {
        if self.block_proof.is_none() {
            self.block_proof.set_default();
        }
        self.block_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_block_proof(&mut self) -> BlockProof {
        self.block_proof.take().unwrap_or_else(|| BlockProof::new())
    }

    // .exonum.proof.MapProof call_proof = 2;


    pub fn get_call_proof(&self) -> &super::map_proof::MapProof {
        self.call_proof.as_ref().unwrap_or_else(|| <super::map_proof::MapProof as ::protobuf::Message>::default_instance())
    }
    pub fn clear_call_proof(&mut self) {
        self.call_proof.clear();
    }

    pub fn has_call_proof(&self) -> bool {
        self.call_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_call_proof(&mut self, v: super::map_proof::MapProof) {
        self.call_proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_call_proof(&mut self) -> &mut super::map_proof::MapProof {
        if self.call_proof.is_none() {
            self.call_proof.set_default();
        }
        self.call_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_call_proof(&mut self) -> super::map_proof::MapProof {
        self.call_proof.take().unwrap_or_else(|| super::map_proof::MapProof::new())
    }

    // string error_description = 3;


    pub fn get_error_description(&self) -> &str {
        &self.error_description
    }
    pub fn clear_error_description(&mut self) {
        self.error_description.clear();
    }

    // Param is passed by value, moved
    pub fn set_error_description(&mut self, v: ::std::string::String) {
        self.error_description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error_description(&mut self) -> &mut ::std::string::String {
        &mut self.error_description
    }

    // Take field
    pub fn take_error_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error_description, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CallProof {
    fn is_initialized(&self) -> bool {
        for v in &self.block_proof {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.call_proof {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block_proof)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.call_proof)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error_description)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.block_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.call_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.error_description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.error_description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.block_proof.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.call_proof.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.error_description.is_empty() {
            os.write_string(3, &self.error_description)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CallProof {
        CallProof::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BlockProof>>(
                "block_proof",
                |m: &CallProof| { &m.block_proof },
                |m: &mut CallProof| { &mut m.block_proof },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::map_proof::MapProof>>(
                "call_proof",
                |m: &CallProof| { &m.call_proof },
                |m: &mut CallProof| { &mut m.call_proof },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "error_description",
                |m: &CallProof| { &m.error_description },
                |m: &mut CallProof| { &mut m.error_description },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CallProof>(
                "CallProof",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CallProof {
        static instance: ::protobuf::rt::LazyV2<CallProof> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CallProof::new)
    }
}

impl ::protobuf::Clear for CallProof {
    fn clear(&mut self) {
        self.block_proof.clear();
        self.call_proof.clear();
        self.error_description.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CallProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CallProof {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13exonum/proofs.proto\x12\x06exonum\x1a\x17exonum/blockchain.proto\
    \x1a\x15exonum/messages.proto\x1a\x1cexonum/proof/map_proof.proto\"h\n\n\
    BlockProof\x12#\n\x05block\x18\x01\x20\x01(\x0b2\r.exonum.BlockR\x05bloc\
    k\x125\n\nprecommits\x18\x02\x20\x03(\x0b2\x15.exonum.SignedMessageR\npr\
    ecommits\"z\n\nIndexProof\x123\n\x0bblock_proof\x18\x01\x20\x01(\x0b2\
    \x12.exonum.BlockProofR\nblockProof\x127\n\x0bindex_proof\x18\x02\x20\
    \x01(\x0b2\x16.exonum.proof.MapProofR\nindexProof\"\xa4\x01\n\tCallProof\
    \x123\n\x0bblock_proof\x18\x01\x20\x01(\x0b2\x12.exonum.BlockProofR\nblo\
    ckProof\x125\n\ncall_proof\x18\x02\x20\x01(\x0b2\x16.exonum.proof.MapPro\
    ofR\tcallProof\x12+\n\x11error_description\x18\x03\x20\x01(\tR\x10errorD\
    escriptionB\x1a\n\x18com.exonum.messages.coreb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
