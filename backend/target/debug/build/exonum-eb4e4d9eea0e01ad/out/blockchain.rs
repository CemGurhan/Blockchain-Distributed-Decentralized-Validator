// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `exonum/blockchain.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct AdditionalHeaders {
    // message fields
    pub headers: ::protobuf::SingularPtrField<super::key_value_sequence::KeyValueSequence>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AdditionalHeaders {
    fn default() -> &'a AdditionalHeaders {
        <AdditionalHeaders as ::protobuf::Message>::default_instance()
    }
}

impl AdditionalHeaders {
    pub fn new() -> AdditionalHeaders {
        ::std::default::Default::default()
    }

    // .exonum.KeyValueSequence headers = 1;


    pub fn get_headers(&self) -> &super::key_value_sequence::KeyValueSequence {
        self.headers.as_ref().unwrap_or_else(|| <super::key_value_sequence::KeyValueSequence as ::protobuf::Message>::default_instance())
    }
    pub fn clear_headers(&mut self) {
        self.headers.clear();
    }

    pub fn has_headers(&self) -> bool {
        self.headers.is_some()
    }

    // Param is passed by value, moved
    pub fn set_headers(&mut self, v: super::key_value_sequence::KeyValueSequence) {
        self.headers = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_headers(&mut self) -> &mut super::key_value_sequence::KeyValueSequence {
        if self.headers.is_none() {
            self.headers.set_default();
        }
        self.headers.as_mut().unwrap()
    }

    // Take field
    pub fn take_headers(&mut self) -> super::key_value_sequence::KeyValueSequence {
        self.headers.take().unwrap_or_else(|| super::key_value_sequence::KeyValueSequence::new())
    }
}

impl ::protobuf::Message for AdditionalHeaders {
    fn is_initialized(&self) -> bool {
        for v in &self.headers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.headers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.headers.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.headers.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AdditionalHeaders {
        AdditionalHeaders::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::key_value_sequence::KeyValueSequence>>(
                "headers",
                |m: &AdditionalHeaders| { &m.headers },
                |m: &mut AdditionalHeaders| { &mut m.headers },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AdditionalHeaders>(
                "AdditionalHeaders",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AdditionalHeaders {
        static instance: ::protobuf::rt::LazyV2<AdditionalHeaders> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AdditionalHeaders::new)
    }
}

impl ::protobuf::Clear for AdditionalHeaders {
    fn clear(&mut self) {
        self.headers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AdditionalHeaders {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AdditionalHeaders {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Block {
    // message fields
    pub proposer_id: u32,
    pub height: u64,
    pub tx_count: u32,
    pub prev_hash: ::protobuf::SingularPtrField<super::types::Hash>,
    pub tx_hash: ::protobuf::SingularPtrField<super::types::Hash>,
    pub state_hash: ::protobuf::SingularPtrField<super::types::Hash>,
    pub error_hash: ::protobuf::SingularPtrField<super::types::Hash>,
    pub additional_headers: ::protobuf::SingularPtrField<AdditionalHeaders>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Block {
    fn default() -> &'a Block {
        <Block as ::protobuf::Message>::default_instance()
    }
}

impl Block {
    pub fn new() -> Block {
        ::std::default::Default::default()
    }

    // uint32 proposer_id = 1;


    pub fn get_proposer_id(&self) -> u32 {
        self.proposer_id
    }
    pub fn clear_proposer_id(&mut self) {
        self.proposer_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_proposer_id(&mut self, v: u32) {
        self.proposer_id = v;
    }

    // uint64 height = 2;


    pub fn get_height(&self) -> u64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: u64) {
        self.height = v;
    }

    // uint32 tx_count = 3;


    pub fn get_tx_count(&self) -> u32 {
        self.tx_count
    }
    pub fn clear_tx_count(&mut self) {
        self.tx_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_tx_count(&mut self, v: u32) {
        self.tx_count = v;
    }

    // .exonum.crypto.Hash prev_hash = 4;


    pub fn get_prev_hash(&self) -> &super::types::Hash {
        self.prev_hash.as_ref().unwrap_or_else(|| <super::types::Hash as ::protobuf::Message>::default_instance())
    }
    pub fn clear_prev_hash(&mut self) {
        self.prev_hash.clear();
    }

    pub fn has_prev_hash(&self) -> bool {
        self.prev_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_prev_hash(&mut self, v: super::types::Hash) {
        self.prev_hash = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prev_hash(&mut self) -> &mut super::types::Hash {
        if self.prev_hash.is_none() {
            self.prev_hash.set_default();
        }
        self.prev_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_prev_hash(&mut self) -> super::types::Hash {
        self.prev_hash.take().unwrap_or_else(|| super::types::Hash::new())
    }

    // .exonum.crypto.Hash tx_hash = 5;


    pub fn get_tx_hash(&self) -> &super::types::Hash {
        self.tx_hash.as_ref().unwrap_or_else(|| <super::types::Hash as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tx_hash(&mut self) {
        self.tx_hash.clear();
    }

    pub fn has_tx_hash(&self) -> bool {
        self.tx_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_hash(&mut self, v: super::types::Hash) {
        self.tx_hash = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_hash(&mut self) -> &mut super::types::Hash {
        if self.tx_hash.is_none() {
            self.tx_hash.set_default();
        }
        self.tx_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx_hash(&mut self) -> super::types::Hash {
        self.tx_hash.take().unwrap_or_else(|| super::types::Hash::new())
    }

    // .exonum.crypto.Hash state_hash = 6;


    pub fn get_state_hash(&self) -> &super::types::Hash {
        self.state_hash.as_ref().unwrap_or_else(|| <super::types::Hash as ::protobuf::Message>::default_instance())
    }
    pub fn clear_state_hash(&mut self) {
        self.state_hash.clear();
    }

    pub fn has_state_hash(&self) -> bool {
        self.state_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state_hash(&mut self, v: super::types::Hash) {
        self.state_hash = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state_hash(&mut self) -> &mut super::types::Hash {
        if self.state_hash.is_none() {
            self.state_hash.set_default();
        }
        self.state_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_state_hash(&mut self) -> super::types::Hash {
        self.state_hash.take().unwrap_or_else(|| super::types::Hash::new())
    }

    // .exonum.crypto.Hash error_hash = 7;


    pub fn get_error_hash(&self) -> &super::types::Hash {
        self.error_hash.as_ref().unwrap_or_else(|| <super::types::Hash as ::protobuf::Message>::default_instance())
    }
    pub fn clear_error_hash(&mut self) {
        self.error_hash.clear();
    }

    pub fn has_error_hash(&self) -> bool {
        self.error_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error_hash(&mut self, v: super::types::Hash) {
        self.error_hash = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error_hash(&mut self) -> &mut super::types::Hash {
        if self.error_hash.is_none() {
            self.error_hash.set_default();
        }
        self.error_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_error_hash(&mut self) -> super::types::Hash {
        self.error_hash.take().unwrap_or_else(|| super::types::Hash::new())
    }

    // .exonum.AdditionalHeaders additional_headers = 8;


    pub fn get_additional_headers(&self) -> &AdditionalHeaders {
        self.additional_headers.as_ref().unwrap_or_else(|| <AdditionalHeaders as ::protobuf::Message>::default_instance())
    }
    pub fn clear_additional_headers(&mut self) {
        self.additional_headers.clear();
    }

    pub fn has_additional_headers(&self) -> bool {
        self.additional_headers.is_some()
    }

    // Param is passed by value, moved
    pub fn set_additional_headers(&mut self, v: AdditionalHeaders) {
        self.additional_headers = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_additional_headers(&mut self) -> &mut AdditionalHeaders {
        if self.additional_headers.is_none() {
            self.additional_headers.set_default();
        }
        self.additional_headers.as_mut().unwrap()
    }

    // Take field
    pub fn take_additional_headers(&mut self) -> AdditionalHeaders {
        self.additional_headers.take().unwrap_or_else(|| AdditionalHeaders::new())
    }
}

impl ::protobuf::Message for Block {
    fn is_initialized(&self) -> bool {
        for v in &self.prev_hash {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tx_hash {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.state_hash {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.error_hash {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.additional_headers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.proposer_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.height = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.tx_count = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.prev_hash)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tx_hash)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.state_hash)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error_hash)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.additional_headers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.proposer_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.proposer_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tx_count != 0 {
            my_size += ::protobuf::rt::value_size(3, self.tx_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.prev_hash.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.tx_hash.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.state_hash.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.error_hash.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.additional_headers.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.proposer_id != 0 {
            os.write_uint32(1, self.proposer_id)?;
        }
        if self.height != 0 {
            os.write_uint64(2, self.height)?;
        }
        if self.tx_count != 0 {
            os.write_uint32(3, self.tx_count)?;
        }
        if let Some(ref v) = self.prev_hash.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.tx_hash.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.state_hash.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.error_hash.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.additional_headers.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Block {
        Block::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "proposer_id",
                |m: &Block| { &m.proposer_id },
                |m: &mut Block| { &mut m.proposer_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "height",
                |m: &Block| { &m.height },
                |m: &mut Block| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "tx_count",
                |m: &Block| { &m.tx_count },
                |m: &mut Block| { &mut m.tx_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::Hash>>(
                "prev_hash",
                |m: &Block| { &m.prev_hash },
                |m: &mut Block| { &mut m.prev_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::Hash>>(
                "tx_hash",
                |m: &Block| { &m.tx_hash },
                |m: &mut Block| { &mut m.tx_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::Hash>>(
                "state_hash",
                |m: &Block| { &m.state_hash },
                |m: &mut Block| { &mut m.state_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::Hash>>(
                "error_hash",
                |m: &Block| { &m.error_hash },
                |m: &mut Block| { &mut m.error_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AdditionalHeaders>>(
                "additional_headers",
                |m: &Block| { &m.additional_headers },
                |m: &mut Block| { &mut m.additional_headers },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Block>(
                "Block",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Block {
        static instance: ::protobuf::rt::LazyV2<Block> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Block::new)
    }
}

impl ::protobuf::Clear for Block {
    fn clear(&mut self) {
        self.proposer_id = 0;
        self.height = 0;
        self.tx_count = 0;
        self.prev_hash.clear();
        self.tx_hash.clear();
        self.state_hash.clear();
        self.error_hash.clear();
        self.additional_headers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Block {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Block {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct TxLocation {
    // message fields
    pub block_height: u64,
    pub position_in_block: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TxLocation {
    fn default() -> &'a TxLocation {
        <TxLocation as ::protobuf::Message>::default_instance()
    }
}

impl TxLocation {
    pub fn new() -> TxLocation {
        ::std::default::Default::default()
    }

    // uint64 block_height = 1;


    pub fn get_block_height(&self) -> u64 {
        self.block_height
    }
    pub fn clear_block_height(&mut self) {
        self.block_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_height(&mut self, v: u64) {
        self.block_height = v;
    }

    // uint32 position_in_block = 2;


    pub fn get_position_in_block(&self) -> u32 {
        self.position_in_block
    }
    pub fn clear_position_in_block(&mut self) {
        self.position_in_block = 0;
    }

    // Param is passed by value, moved
    pub fn set_position_in_block(&mut self, v: u32) {
        self.position_in_block = v;
    }
}

impl ::protobuf::Message for TxLocation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.block_height = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.position_in_block = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.block_height != 0 {
            my_size += ::protobuf::rt::value_size(1, self.block_height, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.position_in_block != 0 {
            my_size += ::protobuf::rt::value_size(2, self.position_in_block, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.block_height != 0 {
            os.write_uint64(1, self.block_height)?;
        }
        if self.position_in_block != 0 {
            os.write_uint32(2, self.position_in_block)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TxLocation {
        TxLocation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "block_height",
                |m: &TxLocation| { &m.block_height },
                |m: &mut TxLocation| { &mut m.block_height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "position_in_block",
                |m: &TxLocation| { &m.position_in_block },
                |m: &mut TxLocation| { &mut m.position_in_block },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TxLocation>(
                "TxLocation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TxLocation {
        static instance: ::protobuf::rt::LazyV2<TxLocation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TxLocation::new)
    }
}

impl ::protobuf::Clear for TxLocation {
    fn clear(&mut self) {
        self.block_height = 0;
        self.position_in_block = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TxLocation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TxLocation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct CallInBlock {
    // message oneof groups
    pub call: ::std::option::Option<CallInBlock_oneof_call>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CallInBlock {
    fn default() -> &'a CallInBlock {
        <CallInBlock as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum CallInBlock_oneof_call {
    transaction(u32),
    before_transactions(u32),
    after_transactions(u32),
}

impl CallInBlock {
    pub fn new() -> CallInBlock {
        ::std::default::Default::default()
    }

    // uint32 transaction = 1;


    pub fn get_transaction(&self) -> u32 {
        match self.call {
            ::std::option::Option::Some(CallInBlock_oneof_call::transaction(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_transaction(&mut self) {
        self.call = ::std::option::Option::None;
    }

    pub fn has_transaction(&self) -> bool {
        match self.call {
            ::std::option::Option::Some(CallInBlock_oneof_call::transaction(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_transaction(&mut self, v: u32) {
        self.call = ::std::option::Option::Some(CallInBlock_oneof_call::transaction(v))
    }

    // uint32 before_transactions = 2;


    pub fn get_before_transactions(&self) -> u32 {
        match self.call {
            ::std::option::Option::Some(CallInBlock_oneof_call::before_transactions(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_before_transactions(&mut self) {
        self.call = ::std::option::Option::None;
    }

    pub fn has_before_transactions(&self) -> bool {
        match self.call {
            ::std::option::Option::Some(CallInBlock_oneof_call::before_transactions(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_before_transactions(&mut self, v: u32) {
        self.call = ::std::option::Option::Some(CallInBlock_oneof_call::before_transactions(v))
    }

    // uint32 after_transactions = 3;


    pub fn get_after_transactions(&self) -> u32 {
        match self.call {
            ::std::option::Option::Some(CallInBlock_oneof_call::after_transactions(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_after_transactions(&mut self) {
        self.call = ::std::option::Option::None;
    }

    pub fn has_after_transactions(&self) -> bool {
        match self.call {
            ::std::option::Option::Some(CallInBlock_oneof_call::after_transactions(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_after_transactions(&mut self, v: u32) {
        self.call = ::std::option::Option::Some(CallInBlock_oneof_call::after_transactions(v))
    }
}

impl ::protobuf::Message for CallInBlock {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.call = ::std::option::Option::Some(CallInBlock_oneof_call::transaction(is.read_uint32()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.call = ::std::option::Option::Some(CallInBlock_oneof_call::before_transactions(is.read_uint32()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.call = ::std::option::Option::Some(CallInBlock_oneof_call::after_transactions(is.read_uint32()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.call {
            match v {
                &CallInBlock_oneof_call::transaction(v) => {
                    my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &CallInBlock_oneof_call::before_transactions(v) => {
                    my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &CallInBlock_oneof_call::after_transactions(v) => {
                    my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.call {
            match v {
                &CallInBlock_oneof_call::transaction(v) => {
                    os.write_uint32(1, v)?;
                },
                &CallInBlock_oneof_call::before_transactions(v) => {
                    os.write_uint32(2, v)?;
                },
                &CallInBlock_oneof_call::after_transactions(v) => {
                    os.write_uint32(3, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CallInBlock {
        CallInBlock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor::<_>(
                "transaction",
                CallInBlock::has_transaction,
                CallInBlock::get_transaction,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor::<_>(
                "before_transactions",
                CallInBlock::has_before_transactions,
                CallInBlock::get_before_transactions,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor::<_>(
                "after_transactions",
                CallInBlock::has_after_transactions,
                CallInBlock::get_after_transactions,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CallInBlock>(
                "CallInBlock",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CallInBlock {
        static instance: ::protobuf::rt::LazyV2<CallInBlock> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CallInBlock::new)
    }
}

impl ::protobuf::Clear for CallInBlock {
    fn clear(&mut self) {
        self.call = ::std::option::Option::None;
        self.call = ::std::option::Option::None;
        self.call = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CallInBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CallInBlock {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ValidatorKeys {
    // message fields
    pub consensus_key: ::protobuf::SingularPtrField<super::types::PublicKey>,
    pub service_key: ::protobuf::SingularPtrField<super::types::PublicKey>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValidatorKeys {
    fn default() -> &'a ValidatorKeys {
        <ValidatorKeys as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorKeys {
    pub fn new() -> ValidatorKeys {
        ::std::default::Default::default()
    }

    // .exonum.crypto.PublicKey consensus_key = 1;


    pub fn get_consensus_key(&self) -> &super::types::PublicKey {
        self.consensus_key.as_ref().unwrap_or_else(|| <super::types::PublicKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_consensus_key(&mut self) {
        self.consensus_key.clear();
    }

    pub fn has_consensus_key(&self) -> bool {
        self.consensus_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_consensus_key(&mut self, v: super::types::PublicKey) {
        self.consensus_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consensus_key(&mut self) -> &mut super::types::PublicKey {
        if self.consensus_key.is_none() {
            self.consensus_key.set_default();
        }
        self.consensus_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_consensus_key(&mut self) -> super::types::PublicKey {
        self.consensus_key.take().unwrap_or_else(|| super::types::PublicKey::new())
    }

    // .exonum.crypto.PublicKey service_key = 2;


    pub fn get_service_key(&self) -> &super::types::PublicKey {
        self.service_key.as_ref().unwrap_or_else(|| <super::types::PublicKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_service_key(&mut self) {
        self.service_key.clear();
    }

    pub fn has_service_key(&self) -> bool {
        self.service_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_service_key(&mut self, v: super::types::PublicKey) {
        self.service_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_key(&mut self) -> &mut super::types::PublicKey {
        if self.service_key.is_none() {
            self.service_key.set_default();
        }
        self.service_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_service_key(&mut self) -> super::types::PublicKey {
        self.service_key.take().unwrap_or_else(|| super::types::PublicKey::new())
    }
}

impl ::protobuf::Message for ValidatorKeys {
    fn is_initialized(&self) -> bool {
        for v in &self.consensus_key {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.service_key {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.consensus_key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.service_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.consensus_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.service_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.consensus_key.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.service_key.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValidatorKeys {
        ValidatorKeys::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::PublicKey>>(
                "consensus_key",
                |m: &ValidatorKeys| { &m.consensus_key },
                |m: &mut ValidatorKeys| { &mut m.consensus_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::PublicKey>>(
                "service_key",
                |m: &ValidatorKeys| { &m.service_key },
                |m: &mut ValidatorKeys| { &mut m.service_key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ValidatorKeys>(
                "ValidatorKeys",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ValidatorKeys {
        static instance: ::protobuf::rt::LazyV2<ValidatorKeys> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValidatorKeys::new)
    }
}

impl ::protobuf::Clear for ValidatorKeys {
    fn clear(&mut self) {
        self.consensus_key.clear();
        self.service_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ValidatorKeys {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorKeys {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Config {
    // message fields
    pub validator_keys: ::protobuf::RepeatedField<ValidatorKeys>,
    pub first_round_timeout: u64,
    pub status_timeout: u64,
    pub peers_timeout: u64,
    pub txs_block_limit: u32,
    pub max_message_len: u32,
    pub min_propose_timeout: u64,
    pub max_propose_timeout: u64,
    pub propose_timeout_threshold: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Config {
    fn default() -> &'a Config {
        <Config as ::protobuf::Message>::default_instance()
    }
}

impl Config {
    pub fn new() -> Config {
        ::std::default::Default::default()
    }

    // repeated .exonum.ValidatorKeys validator_keys = 1;


    pub fn get_validator_keys(&self) -> &[ValidatorKeys] {
        &self.validator_keys
    }
    pub fn clear_validator_keys(&mut self) {
        self.validator_keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_keys(&mut self, v: ::protobuf::RepeatedField<ValidatorKeys>) {
        self.validator_keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_validator_keys(&mut self) -> &mut ::protobuf::RepeatedField<ValidatorKeys> {
        &mut self.validator_keys
    }

    // Take field
    pub fn take_validator_keys(&mut self) -> ::protobuf::RepeatedField<ValidatorKeys> {
        ::std::mem::replace(&mut self.validator_keys, ::protobuf::RepeatedField::new())
    }

    // uint64 first_round_timeout = 2;


    pub fn get_first_round_timeout(&self) -> u64 {
        self.first_round_timeout
    }
    pub fn clear_first_round_timeout(&mut self) {
        self.first_round_timeout = 0;
    }

    // Param is passed by value, moved
    pub fn set_first_round_timeout(&mut self, v: u64) {
        self.first_round_timeout = v;
    }

    // uint64 status_timeout = 3;


    pub fn get_status_timeout(&self) -> u64 {
        self.status_timeout
    }
    pub fn clear_status_timeout(&mut self) {
        self.status_timeout = 0;
    }

    // Param is passed by value, moved
    pub fn set_status_timeout(&mut self, v: u64) {
        self.status_timeout = v;
    }

    // uint64 peers_timeout = 4;


    pub fn get_peers_timeout(&self) -> u64 {
        self.peers_timeout
    }
    pub fn clear_peers_timeout(&mut self) {
        self.peers_timeout = 0;
    }

    // Param is passed by value, moved
    pub fn set_peers_timeout(&mut self, v: u64) {
        self.peers_timeout = v;
    }

    // uint32 txs_block_limit = 5;


    pub fn get_txs_block_limit(&self) -> u32 {
        self.txs_block_limit
    }
    pub fn clear_txs_block_limit(&mut self) {
        self.txs_block_limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_txs_block_limit(&mut self, v: u32) {
        self.txs_block_limit = v;
    }

    // uint32 max_message_len = 6;


    pub fn get_max_message_len(&self) -> u32 {
        self.max_message_len
    }
    pub fn clear_max_message_len(&mut self) {
        self.max_message_len = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_message_len(&mut self, v: u32) {
        self.max_message_len = v;
    }

    // uint64 min_propose_timeout = 7;


    pub fn get_min_propose_timeout(&self) -> u64 {
        self.min_propose_timeout
    }
    pub fn clear_min_propose_timeout(&mut self) {
        self.min_propose_timeout = 0;
    }

    // Param is passed by value, moved
    pub fn set_min_propose_timeout(&mut self, v: u64) {
        self.min_propose_timeout = v;
    }

    // uint64 max_propose_timeout = 8;


    pub fn get_max_propose_timeout(&self) -> u64 {
        self.max_propose_timeout
    }
    pub fn clear_max_propose_timeout(&mut self) {
        self.max_propose_timeout = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_propose_timeout(&mut self, v: u64) {
        self.max_propose_timeout = v;
    }

    // uint32 propose_timeout_threshold = 9;


    pub fn get_propose_timeout_threshold(&self) -> u32 {
        self.propose_timeout_threshold
    }
    pub fn clear_propose_timeout_threshold(&mut self) {
        self.propose_timeout_threshold = 0;
    }

    // Param is passed by value, moved
    pub fn set_propose_timeout_threshold(&mut self, v: u32) {
        self.propose_timeout_threshold = v;
    }
}

impl ::protobuf::Message for Config {
    fn is_initialized(&self) -> bool {
        for v in &self.validator_keys {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.validator_keys)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.first_round_timeout = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.status_timeout = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.peers_timeout = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.txs_block_limit = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.max_message_len = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.min_propose_timeout = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.max_propose_timeout = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.propose_timeout_threshold = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.validator_keys {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.first_round_timeout != 0 {
            my_size += ::protobuf::rt::value_size(2, self.first_round_timeout, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.status_timeout != 0 {
            my_size += ::protobuf::rt::value_size(3, self.status_timeout, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.peers_timeout != 0 {
            my_size += ::protobuf::rt::value_size(4, self.peers_timeout, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.txs_block_limit != 0 {
            my_size += ::protobuf::rt::value_size(5, self.txs_block_limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.max_message_len != 0 {
            my_size += ::protobuf::rt::value_size(6, self.max_message_len, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.min_propose_timeout != 0 {
            my_size += ::protobuf::rt::value_size(7, self.min_propose_timeout, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.max_propose_timeout != 0 {
            my_size += ::protobuf::rt::value_size(8, self.max_propose_timeout, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.propose_timeout_threshold != 0 {
            my_size += ::protobuf::rt::value_size(9, self.propose_timeout_threshold, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.validator_keys {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.first_round_timeout != 0 {
            os.write_uint64(2, self.first_round_timeout)?;
        }
        if self.status_timeout != 0 {
            os.write_uint64(3, self.status_timeout)?;
        }
        if self.peers_timeout != 0 {
            os.write_uint64(4, self.peers_timeout)?;
        }
        if self.txs_block_limit != 0 {
            os.write_uint32(5, self.txs_block_limit)?;
        }
        if self.max_message_len != 0 {
            os.write_uint32(6, self.max_message_len)?;
        }
        if self.min_propose_timeout != 0 {
            os.write_uint64(7, self.min_propose_timeout)?;
        }
        if self.max_propose_timeout != 0 {
            os.write_uint64(8, self.max_propose_timeout)?;
        }
        if self.propose_timeout_threshold != 0 {
            os.write_uint32(9, self.propose_timeout_threshold)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Config {
        Config::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ValidatorKeys>>(
                "validator_keys",
                |m: &Config| { &m.validator_keys },
                |m: &mut Config| { &mut m.validator_keys },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "first_round_timeout",
                |m: &Config| { &m.first_round_timeout },
                |m: &mut Config| { &mut m.first_round_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "status_timeout",
                |m: &Config| { &m.status_timeout },
                |m: &mut Config| { &mut m.status_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "peers_timeout",
                |m: &Config| { &m.peers_timeout },
                |m: &mut Config| { &mut m.peers_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "txs_block_limit",
                |m: &Config| { &m.txs_block_limit },
                |m: &mut Config| { &mut m.txs_block_limit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "max_message_len",
                |m: &Config| { &m.max_message_len },
                |m: &mut Config| { &mut m.max_message_len },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "min_propose_timeout",
                |m: &Config| { &m.min_propose_timeout },
                |m: &mut Config| { &mut m.min_propose_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "max_propose_timeout",
                |m: &Config| { &m.max_propose_timeout },
                |m: &mut Config| { &mut m.max_propose_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "propose_timeout_threshold",
                |m: &Config| { &m.propose_timeout_threshold },
                |m: &mut Config| { &mut m.propose_timeout_threshold },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Config>(
                "Config",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Config {
        static instance: ::protobuf::rt::LazyV2<Config> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Config::new)
    }
}

impl ::protobuf::Clear for Config {
    fn clear(&mut self) {
        self.validator_keys.clear();
        self.first_round_timeout = 0;
        self.status_timeout = 0;
        self.peers_timeout = 0;
        self.txs_block_limit = 0;
        self.max_message_len = 0;
        self.min_propose_timeout = 0;
        self.max_propose_timeout = 0;
        self.propose_timeout_threshold = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Config {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Config {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17exonum/blockchain.proto\x12\x06exonum\x1a\x19exonum/crypto/types.p\
    roto\x1a\x1fexonum/key_value_sequence.proto\"G\n\x11AdditionalHeaders\
    \x122\n\x07headers\x18\x01\x20\x01(\x0b2\x18.exonum.KeyValueSequenceR\
    \x07headers\"\xed\x02\n\x05Block\x12\x1f\n\x0bproposer_id\x18\x01\x20\
    \x01(\rR\nproposerId\x12\x16\n\x06height\x18\x02\x20\x01(\x04R\x06height\
    \x12\x19\n\x08tx_count\x18\x03\x20\x01(\rR\x07txCount\x120\n\tprev_hash\
    \x18\x04\x20\x01(\x0b2\x13.exonum.crypto.HashR\x08prevHash\x12,\n\x07tx_\
    hash\x18\x05\x20\x01(\x0b2\x13.exonum.crypto.HashR\x06txHash\x122\n\nsta\
    te_hash\x18\x06\x20\x01(\x0b2\x13.exonum.crypto.HashR\tstateHash\x122\n\
    \nerror_hash\x18\x07\x20\x01(\x0b2\x13.exonum.crypto.HashR\terrorHash\
    \x12H\n\x12additional_headers\x18\x08\x20\x01(\x0b2\x19.exonum.Additiona\
    lHeadersR\x11additionalHeaders\"[\n\nTxLocation\x12!\n\x0cblock_height\
    \x18\x01\x20\x01(\x04R\x0bblockHeight\x12*\n\x11position_in_block\x18\
    \x02\x20\x01(\rR\x0fpositionInBlock\"\x9d\x01\n\x0bCallInBlock\x12\"\n\
    \x0btransaction\x18\x01\x20\x01(\rH\0R\x0btransaction\x121\n\x13before_t\
    ransactions\x18\x02\x20\x01(\rH\0R\x12beforeTransactions\x12/\n\x12after\
    _transactions\x18\x03\x20\x01(\rH\0R\x11afterTransactionsB\x06\n\x04call\
    \"\x89\x01\n\rValidatorKeys\x12=\n\rconsensus_key\x18\x01\x20\x01(\x0b2\
    \x18.exonum.crypto.PublicKeyR\x0cconsensusKey\x129\n\x0bservice_key\x18\
    \x02\x20\x01(\x0b2\x18.exonum.crypto.PublicKeyR\nserviceKey\"\xae\x03\n\
    \x06Config\x12<\n\x0evalidator_keys\x18\x01\x20\x03(\x0b2\x15.exonum.Val\
    idatorKeysR\rvalidatorKeys\x12.\n\x13first_round_timeout\x18\x02\x20\x01\
    (\x04R\x11firstRoundTimeout\x12%\n\x0estatus_timeout\x18\x03\x20\x01(\
    \x04R\rstatusTimeout\x12#\n\rpeers_timeout\x18\x04\x20\x01(\x04R\x0cpeer\
    sTimeout\x12&\n\x0ftxs_block_limit\x18\x05\x20\x01(\rR\rtxsBlockLimit\
    \x12&\n\x0fmax_message_len\x18\x06\x20\x01(\rR\rmaxMessageLen\x12.\n\x13\
    min_propose_timeout\x18\x07\x20\x01(\x04R\x11minProposeTimeout\x12.\n\
    \x13max_propose_timeout\x18\x08\x20\x01(\x04R\x11maxProposeTimeout\x12:\
    \n\x19propose_timeout_threshold\x18\t\x20\x01(\rR\x17proposeTimeoutThres\
    holdB\x1a\n\x18com.exonum.messages.coreb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
