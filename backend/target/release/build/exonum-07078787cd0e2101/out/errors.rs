// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `exonum/runtime/errors.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ExecutionError {
    // message fields
    pub kind: ErrorKind,
    pub code: u32,
    pub description: ::std::string::String,
    // message oneof groups
    pub runtime: ::std::option::Option<ExecutionError_oneof_runtime>,
    pub call_info: ::std::option::Option<ExecutionError_oneof_call_info>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExecutionError {
    fn default() -> &'a ExecutionError {
        <ExecutionError as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum ExecutionError_oneof_runtime {
    runtime_id(u32),
    no_runtime_id(::protobuf::well_known_types::Empty),
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum ExecutionError_oneof_call_info {
    call_site(CallSite),
    no_call_site(::protobuf::well_known_types::Empty),
}

impl ExecutionError {
    pub fn new() -> ExecutionError {
        ::std::default::Default::default()
    }

    // .exonum.runtime.ErrorKind kind = 1;


    pub fn get_kind(&self) -> ErrorKind {
        self.kind
    }
    pub fn clear_kind(&mut self) {
        self.kind = ErrorKind::UNEXPECTED;
    }

    // Param is passed by value, moved
    pub fn set_kind(&mut self, v: ErrorKind) {
        self.kind = v;
    }

    // uint32 code = 2;


    pub fn get_code(&self) -> u32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: u32) {
        self.code = v;
    }

    // string description = 3;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // uint32 runtime_id = 4;


    pub fn get_runtime_id(&self) -> u32 {
        match self.runtime {
            ::std::option::Option::Some(ExecutionError_oneof_runtime::runtime_id(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_runtime_id(&mut self) {
        self.runtime = ::std::option::Option::None;
    }

    pub fn has_runtime_id(&self) -> bool {
        match self.runtime {
            ::std::option::Option::Some(ExecutionError_oneof_runtime::runtime_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_runtime_id(&mut self, v: u32) {
        self.runtime = ::std::option::Option::Some(ExecutionError_oneof_runtime::runtime_id(v))
    }

    // .google.protobuf.Empty no_runtime_id = 5;


    pub fn get_no_runtime_id(&self) -> &::protobuf::well_known_types::Empty {
        match self.runtime {
            ::std::option::Option::Some(ExecutionError_oneof_runtime::no_runtime_id(ref v)) => v,
            _ => <::protobuf::well_known_types::Empty as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_no_runtime_id(&mut self) {
        self.runtime = ::std::option::Option::None;
    }

    pub fn has_no_runtime_id(&self) -> bool {
        match self.runtime {
            ::std::option::Option::Some(ExecutionError_oneof_runtime::no_runtime_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_no_runtime_id(&mut self, v: ::protobuf::well_known_types::Empty) {
        self.runtime = ::std::option::Option::Some(ExecutionError_oneof_runtime::no_runtime_id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_no_runtime_id(&mut self) -> &mut ::protobuf::well_known_types::Empty {
        if let ::std::option::Option::Some(ExecutionError_oneof_runtime::no_runtime_id(_)) = self.runtime {
        } else {
            self.runtime = ::std::option::Option::Some(ExecutionError_oneof_runtime::no_runtime_id(::protobuf::well_known_types::Empty::new()));
        }
        match self.runtime {
            ::std::option::Option::Some(ExecutionError_oneof_runtime::no_runtime_id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_no_runtime_id(&mut self) -> ::protobuf::well_known_types::Empty {
        if self.has_no_runtime_id() {
            match self.runtime.take() {
                ::std::option::Option::Some(ExecutionError_oneof_runtime::no_runtime_id(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Empty::new()
        }
    }

    // .exonum.runtime.CallSite call_site = 6;


    pub fn get_call_site(&self) -> &CallSite {
        match self.call_info {
            ::std::option::Option::Some(ExecutionError_oneof_call_info::call_site(ref v)) => v,
            _ => <CallSite as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_call_site(&mut self) {
        self.call_info = ::std::option::Option::None;
    }

    pub fn has_call_site(&self) -> bool {
        match self.call_info {
            ::std::option::Option::Some(ExecutionError_oneof_call_info::call_site(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_call_site(&mut self, v: CallSite) {
        self.call_info = ::std::option::Option::Some(ExecutionError_oneof_call_info::call_site(v))
    }

    // Mutable pointer to the field.
    pub fn mut_call_site(&mut self) -> &mut CallSite {
        if let ::std::option::Option::Some(ExecutionError_oneof_call_info::call_site(_)) = self.call_info {
        } else {
            self.call_info = ::std::option::Option::Some(ExecutionError_oneof_call_info::call_site(CallSite::new()));
        }
        match self.call_info {
            ::std::option::Option::Some(ExecutionError_oneof_call_info::call_site(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_call_site(&mut self) -> CallSite {
        if self.has_call_site() {
            match self.call_info.take() {
                ::std::option::Option::Some(ExecutionError_oneof_call_info::call_site(v)) => v,
                _ => panic!(),
            }
        } else {
            CallSite::new()
        }
    }

    // .google.protobuf.Empty no_call_site = 7;


    pub fn get_no_call_site(&self) -> &::protobuf::well_known_types::Empty {
        match self.call_info {
            ::std::option::Option::Some(ExecutionError_oneof_call_info::no_call_site(ref v)) => v,
            _ => <::protobuf::well_known_types::Empty as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_no_call_site(&mut self) {
        self.call_info = ::std::option::Option::None;
    }

    pub fn has_no_call_site(&self) -> bool {
        match self.call_info {
            ::std::option::Option::Some(ExecutionError_oneof_call_info::no_call_site(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_no_call_site(&mut self, v: ::protobuf::well_known_types::Empty) {
        self.call_info = ::std::option::Option::Some(ExecutionError_oneof_call_info::no_call_site(v))
    }

    // Mutable pointer to the field.
    pub fn mut_no_call_site(&mut self) -> &mut ::protobuf::well_known_types::Empty {
        if let ::std::option::Option::Some(ExecutionError_oneof_call_info::no_call_site(_)) = self.call_info {
        } else {
            self.call_info = ::std::option::Option::Some(ExecutionError_oneof_call_info::no_call_site(::protobuf::well_known_types::Empty::new()));
        }
        match self.call_info {
            ::std::option::Option::Some(ExecutionError_oneof_call_info::no_call_site(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_no_call_site(&mut self) -> ::protobuf::well_known_types::Empty {
        if self.has_no_call_site() {
            match self.call_info.take() {
                ::std::option::Option::Some(ExecutionError_oneof_call_info::no_call_site(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Empty::new()
        }
    }
}

impl ::protobuf::Message for ExecutionError {
    fn is_initialized(&self) -> bool {
        if let Some(ExecutionError_oneof_runtime::no_runtime_id(ref v)) = self.runtime {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ExecutionError_oneof_call_info::call_site(ref v)) = self.call_info {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ExecutionError_oneof_call_info::no_call_site(ref v)) = self.call_info {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.kind, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.code = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.runtime = ::std::option::Option::Some(ExecutionError_oneof_runtime::runtime_id(is.read_uint32()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.runtime = ::std::option::Option::Some(ExecutionError_oneof_runtime::no_runtime_id(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.call_info = ::std::option::Option::Some(ExecutionError_oneof_call_info::call_site(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.call_info = ::std::option::Option::Some(ExecutionError_oneof_call_info::no_call_site(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.kind != ErrorKind::UNEXPECTED {
            my_size += ::protobuf::rt::enum_size(1, self.kind);
        }
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(2, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if let ::std::option::Option::Some(ref v) = self.runtime {
            match v {
                &ExecutionError_oneof_runtime::runtime_id(v) => {
                    my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &ExecutionError_oneof_runtime::no_runtime_id(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.call_info {
            match v {
                &ExecutionError_oneof_call_info::call_site(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ExecutionError_oneof_call_info::no_call_site(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.kind != ErrorKind::UNEXPECTED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.kind))?;
        }
        if self.code != 0 {
            os.write_uint32(2, self.code)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if let ::std::option::Option::Some(ref v) = self.runtime {
            match v {
                &ExecutionError_oneof_runtime::runtime_id(v) => {
                    os.write_uint32(4, v)?;
                },
                &ExecutionError_oneof_runtime::no_runtime_id(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.call_info {
            match v {
                &ExecutionError_oneof_call_info::call_site(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ExecutionError_oneof_call_info::no_call_site(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExecutionError {
        ExecutionError::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ErrorKind>>(
                "kind",
                |m: &ExecutionError| { &m.kind },
                |m: &mut ExecutionError| { &mut m.kind },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "code",
                |m: &ExecutionError| { &m.code },
                |m: &mut ExecutionError| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &ExecutionError| { &m.description },
                |m: &mut ExecutionError| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor::<_>(
                "runtime_id",
                ExecutionError::has_runtime_id,
                ExecutionError::get_runtime_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Empty>(
                "no_runtime_id",
                ExecutionError::has_no_runtime_id,
                ExecutionError::get_no_runtime_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CallSite>(
                "call_site",
                ExecutionError::has_call_site,
                ExecutionError::get_call_site,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Empty>(
                "no_call_site",
                ExecutionError::has_no_call_site,
                ExecutionError::get_no_call_site,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ExecutionError>(
                "ExecutionError",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ExecutionError {
        static instance: ::protobuf::rt::LazyV2<ExecutionError> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ExecutionError::new)
    }
}

impl ::protobuf::Clear for ExecutionError {
    fn clear(&mut self) {
        self.kind = ErrorKind::UNEXPECTED;
        self.code = 0;
        self.description.clear();
        self.runtime = ::std::option::Option::None;
        self.runtime = ::std::option::Option::None;
        self.call_info = ::std::option::Option::None;
        self.call_info = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExecutionError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExecutionError {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ExecutionErrorAux {
    // message fields
    pub description: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExecutionErrorAux {
    fn default() -> &'a ExecutionErrorAux {
        <ExecutionErrorAux as ::protobuf::Message>::default_instance()
    }
}

impl ExecutionErrorAux {
    pub fn new() -> ExecutionErrorAux {
        ::std::default::Default::default()
    }

    // string description = 1;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ExecutionErrorAux {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.description.is_empty() {
            os.write_string(1, &self.description)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExecutionErrorAux {
        ExecutionErrorAux::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &ExecutionErrorAux| { &m.description },
                |m: &mut ExecutionErrorAux| { &mut m.description },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ExecutionErrorAux>(
                "ExecutionErrorAux",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ExecutionErrorAux {
        static instance: ::protobuf::rt::LazyV2<ExecutionErrorAux> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ExecutionErrorAux::new)
    }
}

impl ::protobuf::Clear for ExecutionErrorAux {
    fn clear(&mut self) {
        self.description.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExecutionErrorAux {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExecutionErrorAux {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct CallSite {
    // message fields
    pub call_type: CallSite_Type,
    pub instance_id: u32,
    pub method_id: u32,
    pub interface: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CallSite {
    fn default() -> &'a CallSite {
        <CallSite as ::protobuf::Message>::default_instance()
    }
}

impl CallSite {
    pub fn new() -> CallSite {
        ::std::default::Default::default()
    }

    // .exonum.runtime.CallSite.Type call_type = 1;


    pub fn get_call_type(&self) -> CallSite_Type {
        self.call_type
    }
    pub fn clear_call_type(&mut self) {
        self.call_type = CallSite_Type::METHOD;
    }

    // Param is passed by value, moved
    pub fn set_call_type(&mut self, v: CallSite_Type) {
        self.call_type = v;
    }

    // uint32 instance_id = 2;


    pub fn get_instance_id(&self) -> u32 {
        self.instance_id
    }
    pub fn clear_instance_id(&mut self) {
        self.instance_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_instance_id(&mut self, v: u32) {
        self.instance_id = v;
    }

    // uint32 method_id = 3;


    pub fn get_method_id(&self) -> u32 {
        self.method_id
    }
    pub fn clear_method_id(&mut self) {
        self.method_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_method_id(&mut self, v: u32) {
        self.method_id = v;
    }

    // string interface = 4;


    pub fn get_interface(&self) -> &str {
        &self.interface
    }
    pub fn clear_interface(&mut self) {
        self.interface.clear();
    }

    // Param is passed by value, moved
    pub fn set_interface(&mut self, v: ::std::string::String) {
        self.interface = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interface(&mut self) -> &mut ::std::string::String {
        &mut self.interface
    }

    // Take field
    pub fn take_interface(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.interface, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CallSite {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.call_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.instance_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.method_id = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.interface)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.call_type != CallSite_Type::METHOD {
            my_size += ::protobuf::rt::enum_size(1, self.call_type);
        }
        if self.instance_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.instance_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.method_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.method_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.interface.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.interface);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.call_type != CallSite_Type::METHOD {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.call_type))?;
        }
        if self.instance_id != 0 {
            os.write_uint32(2, self.instance_id)?;
        }
        if self.method_id != 0 {
            os.write_uint32(3, self.method_id)?;
        }
        if !self.interface.is_empty() {
            os.write_string(4, &self.interface)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CallSite {
        CallSite::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CallSite_Type>>(
                "call_type",
                |m: &CallSite| { &m.call_type },
                |m: &mut CallSite| { &mut m.call_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "instance_id",
                |m: &CallSite| { &m.instance_id },
                |m: &mut CallSite| { &mut m.instance_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "method_id",
                |m: &CallSite| { &m.method_id },
                |m: &mut CallSite| { &mut m.method_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "interface",
                |m: &CallSite| { &m.interface },
                |m: &mut CallSite| { &mut m.interface },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CallSite>(
                "CallSite",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CallSite {
        static instance: ::protobuf::rt::LazyV2<CallSite> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CallSite::new)
    }
}

impl ::protobuf::Clear for CallSite {
    fn clear(&mut self) {
        self.call_type = CallSite_Type::METHOD;
        self.instance_id = 0;
        self.method_id = 0;
        self.interface.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CallSite {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CallSite {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum CallSite_Type {
    METHOD = 0,
    CONSTRUCTOR = 1,
    BEFORE_TRANSACTIONS = 2,
    AFTER_TRANSACTIONS = 3,
    RESUME = 4,
}

impl ::protobuf::ProtobufEnum for CallSite_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CallSite_Type> {
        match value {
            0 => ::std::option::Option::Some(CallSite_Type::METHOD),
            1 => ::std::option::Option::Some(CallSite_Type::CONSTRUCTOR),
            2 => ::std::option::Option::Some(CallSite_Type::BEFORE_TRANSACTIONS),
            3 => ::std::option::Option::Some(CallSite_Type::AFTER_TRANSACTIONS),
            4 => ::std::option::Option::Some(CallSite_Type::RESUME),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CallSite_Type] = &[
            CallSite_Type::METHOD,
            CallSite_Type::CONSTRUCTOR,
            CallSite_Type::BEFORE_TRANSACTIONS,
            CallSite_Type::AFTER_TRANSACTIONS,
            CallSite_Type::RESUME,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CallSite_Type>("CallSite.Type", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CallSite_Type {
}

impl ::std::default::Default for CallSite_Type {
    fn default() -> Self {
        CallSite_Type::METHOD
    }
}

impl ::protobuf::reflect::ProtobufValue for CallSite_Type {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ExecutionStatus {
    // message oneof groups
    pub result: ::std::option::Option<ExecutionStatus_oneof_result>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExecutionStatus {
    fn default() -> &'a ExecutionStatus {
        <ExecutionStatus as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum ExecutionStatus_oneof_result {
    ok(::protobuf::well_known_types::Empty),
    error(ExecutionError),
}

impl ExecutionStatus {
    pub fn new() -> ExecutionStatus {
        ::std::default::Default::default()
    }

    // .google.protobuf.Empty ok = 1;


    pub fn get_ok(&self) -> &::protobuf::well_known_types::Empty {
        match self.result {
            ::std::option::Option::Some(ExecutionStatus_oneof_result::ok(ref v)) => v,
            _ => <::protobuf::well_known_types::Empty as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_ok(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_ok(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(ExecutionStatus_oneof_result::ok(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ok(&mut self, v: ::protobuf::well_known_types::Empty) {
        self.result = ::std::option::Option::Some(ExecutionStatus_oneof_result::ok(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ok(&mut self) -> &mut ::protobuf::well_known_types::Empty {
        if let ::std::option::Option::Some(ExecutionStatus_oneof_result::ok(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(ExecutionStatus_oneof_result::ok(::protobuf::well_known_types::Empty::new()));
        }
        match self.result {
            ::std::option::Option::Some(ExecutionStatus_oneof_result::ok(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ok(&mut self) -> ::protobuf::well_known_types::Empty {
        if self.has_ok() {
            match self.result.take() {
                ::std::option::Option::Some(ExecutionStatus_oneof_result::ok(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Empty::new()
        }
    }

    // .exonum.runtime.ExecutionError error = 2;


    pub fn get_error(&self) -> &ExecutionError {
        match self.result {
            ::std::option::Option::Some(ExecutionStatus_oneof_result::error(ref v)) => v,
            _ => <ExecutionError as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_error(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_error(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(ExecutionStatus_oneof_result::error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ExecutionError) {
        self.result = ::std::option::Option::Some(ExecutionStatus_oneof_result::error(v))
    }

    // Mutable pointer to the field.
    pub fn mut_error(&mut self) -> &mut ExecutionError {
        if let ::std::option::Option::Some(ExecutionStatus_oneof_result::error(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(ExecutionStatus_oneof_result::error(ExecutionError::new()));
        }
        match self.result {
            ::std::option::Option::Some(ExecutionStatus_oneof_result::error(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_error(&mut self) -> ExecutionError {
        if self.has_error() {
            match self.result.take() {
                ::std::option::Option::Some(ExecutionStatus_oneof_result::error(v)) => v,
                _ => panic!(),
            }
        } else {
            ExecutionError::new()
        }
    }
}

impl ::protobuf::Message for ExecutionStatus {
    fn is_initialized(&self) -> bool {
        if let Some(ExecutionStatus_oneof_result::ok(ref v)) = self.result {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ExecutionStatus_oneof_result::error(ref v)) = self.result {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.result = ::std::option::Option::Some(ExecutionStatus_oneof_result::ok(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.result = ::std::option::Option::Some(ExecutionStatus_oneof_result::error(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.result {
            match v {
                &ExecutionStatus_oneof_result::ok(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ExecutionStatus_oneof_result::error(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.result {
            match v {
                &ExecutionStatus_oneof_result::ok(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ExecutionStatus_oneof_result::error(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExecutionStatus {
        ExecutionStatus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Empty>(
                "ok",
                ExecutionStatus::has_ok,
                ExecutionStatus::get_ok,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ExecutionError>(
                "error",
                ExecutionStatus::has_error,
                ExecutionStatus::get_error,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ExecutionStatus>(
                "ExecutionStatus",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ExecutionStatus {
        static instance: ::protobuf::rt::LazyV2<ExecutionStatus> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ExecutionStatus::new)
    }
}

impl ::protobuf::Clear for ExecutionStatus {
    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.result = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExecutionStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExecutionStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum ErrorKind {
    UNEXPECTED = 0,
    CORE = 1,
    RUNTIME = 2,
    SERVICE = 3,
    COMMON = 4,
}

impl ::protobuf::ProtobufEnum for ErrorKind {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ErrorKind> {
        match value {
            0 => ::std::option::Option::Some(ErrorKind::UNEXPECTED),
            1 => ::std::option::Option::Some(ErrorKind::CORE),
            2 => ::std::option::Option::Some(ErrorKind::RUNTIME),
            3 => ::std::option::Option::Some(ErrorKind::SERVICE),
            4 => ::std::option::Option::Some(ErrorKind::COMMON),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ErrorKind] = &[
            ErrorKind::UNEXPECTED,
            ErrorKind::CORE,
            ErrorKind::RUNTIME,
            ErrorKind::SERVICE,
            ErrorKind::COMMON,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ErrorKind>("ErrorKind", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ErrorKind {
}

impl ::std::default::Default for ErrorKind {
    fn default() -> Self {
        ErrorKind::UNEXPECTED
    }
}

impl ::protobuf::reflect::ProtobufValue for ErrorKind {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bexonum/runtime/errors.proto\x12\x0eexonum.runtime\x1a\x1bgoogle/pr\
    otobuf/empty.proto\"\xe1\x02\n\x0eExecutionError\x12-\n\x04kind\x18\x01\
    \x20\x01(\x0e2\x19.exonum.runtime.ErrorKindR\x04kind\x12\x12\n\x04code\
    \x18\x02\x20\x01(\rR\x04code\x12\x20\n\x0bdescription\x18\x03\x20\x01(\t\
    R\x0bdescription\x12\x1f\n\nruntime_id\x18\x04\x20\x01(\rH\0R\truntimeId\
    \x12<\n\rno_runtime_id\x18\x05\x20\x01(\x0b2\x16.google.protobuf.EmptyH\
    \0R\x0bnoRuntimeId\x127\n\tcall_site\x18\x06\x20\x01(\x0b2\x18.exonum.ru\
    ntime.CallSiteH\x01R\x08callSite\x12:\n\x0cno_call_site\x18\x07\x20\x01(\
    \x0b2\x16.google.protobuf.EmptyH\x01R\nnoCallSiteB\t\n\x07runtimeB\x0b\n\
    \tcall_info\"5\n\x11ExecutionErrorAux\x12\x20\n\x0bdescription\x18\x01\
    \x20\x01(\tR\x0bdescription\"\x84\x02\n\x08CallSite\x12:\n\tcall_type\
    \x18\x01\x20\x01(\x0e2\x1d.exonum.runtime.CallSite.TypeR\x08callType\x12\
    \x1f\n\x0binstance_id\x18\x02\x20\x01(\rR\ninstanceId\x12\x1b\n\tmethod_\
    id\x18\x03\x20\x01(\rR\x08methodId\x12\x1c\n\tinterface\x18\x04\x20\x01(\
    \tR\tinterface\"`\n\x04Type\x12\n\n\x06METHOD\x10\0\x12\x0f\n\x0bCONSTRU\
    CTOR\x10\x01\x12\x17\n\x13BEFORE_TRANSACTIONS\x10\x02\x12\x16\n\x12AFTER\
    _TRANSACTIONS\x10\x03\x12\n\n\x06RESUME\x10\x04\"}\n\x0fExecutionStatus\
    \x12(\n\x02ok\x18\x01\x20\x01(\x0b2\x16.google.protobuf.EmptyH\0R\x02ok\
    \x126\n\x05error\x18\x02\x20\x01(\x0b2\x1e.exonum.runtime.ExecutionError\
    H\0R\x05errorB\x08\n\x06result*K\n\tErrorKind\x12\x0e\n\nUNEXPECTED\x10\
    \0\x12\x08\n\x04CORE\x10\x01\x12\x0b\n\x07RUNTIME\x10\x02\x12\x0b\n\x07S\
    ERVICE\x10\x03\x12\n\n\x06COMMON\x10\x04B\"\n\x20com.exonum.messages.cor\
    e.runtimeb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
