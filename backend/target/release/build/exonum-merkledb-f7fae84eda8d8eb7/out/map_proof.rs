// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `exonum/proof/map_proof.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct MapProof {
    // message fields
    pub entries: ::protobuf::RepeatedField<OptionalEntry>,
    pub proof: ::protobuf::RepeatedField<MapProofEntry>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MapProof {
    fn default() -> &'a MapProof {
        <MapProof as ::protobuf::Message>::default_instance()
    }
}

impl MapProof {
    pub fn new() -> MapProof {
        ::std::default::Default::default()
    }

    // repeated .exonum.proof.OptionalEntry entries = 1;


    pub fn get_entries(&self) -> &[OptionalEntry] {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<OptionalEntry>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<OptionalEntry> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<OptionalEntry> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }

    // repeated .exonum.proof.MapProofEntry proof = 2;


    pub fn get_proof(&self) -> &[MapProofEntry] {
        &self.proof
    }
    pub fn clear_proof(&mut self) {
        self.proof.clear();
    }

    // Param is passed by value, moved
    pub fn set_proof(&mut self, v: ::protobuf::RepeatedField<MapProofEntry>) {
        self.proof = v;
    }

    // Mutable pointer to the field.
    pub fn mut_proof(&mut self) -> &mut ::protobuf::RepeatedField<MapProofEntry> {
        &mut self.proof
    }

    // Take field
    pub fn take_proof(&mut self) -> ::protobuf::RepeatedField<MapProofEntry> {
        ::std::mem::replace(&mut self.proof, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MapProof {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.proof {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.proof)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.proof {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.entries {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.proof {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MapProof {
        MapProof::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OptionalEntry>>(
                "entries",
                |m: &MapProof| { &m.entries },
                |m: &mut MapProof| { &mut m.entries },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MapProofEntry>>(
                "proof",
                |m: &MapProof| { &m.proof },
                |m: &mut MapProof| { &mut m.proof },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MapProof>(
                "MapProof",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MapProof {
        static instance: ::protobuf::rt::LazyV2<MapProof> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MapProof::new)
    }
}

impl ::protobuf::Clear for MapProof {
    fn clear(&mut self) {
        self.entries.clear();
        self.proof.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MapProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MapProof {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct OptionalEntry {
    // message fields
    pub key: ::std::vec::Vec<u8>,
    // message oneof groups
    pub maybe_value: ::std::option::Option<OptionalEntry_oneof_maybe_value>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OptionalEntry {
    fn default() -> &'a OptionalEntry {
        <OptionalEntry as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum OptionalEntry_oneof_maybe_value {
    value(::std::vec::Vec<u8>),
    no_value(::protobuf::well_known_types::Empty),
}

impl OptionalEntry {
    pub fn new() -> OptionalEntry {
        ::std::default::Default::default()
    }

    // bytes key = 1;


    pub fn get_key(&self) -> &[u8] {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.key, ::std::vec::Vec::new())
    }

    // bytes value = 2;


    pub fn get_value(&self) -> &[u8] {
        match self.maybe_value {
            ::std::option::Option::Some(OptionalEntry_oneof_maybe_value::value(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_value(&mut self) {
        self.maybe_value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        match self.maybe_value {
            ::std::option::Option::Some(OptionalEntry_oneof_maybe_value::value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.maybe_value = ::std::option::Option::Some(OptionalEntry_oneof_maybe_value::value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(OptionalEntry_oneof_maybe_value::value(_)) = self.maybe_value {
        } else {
            self.maybe_value = ::std::option::Option::Some(OptionalEntry_oneof_maybe_value::value(::std::vec::Vec::new()));
        }
        match self.maybe_value {
            ::std::option::Option::Some(OptionalEntry_oneof_maybe_value::value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_value() {
            match self.maybe_value.take() {
                ::std::option::Option::Some(OptionalEntry_oneof_maybe_value::value(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // .google.protobuf.Empty no_value = 3;


    pub fn get_no_value(&self) -> &::protobuf::well_known_types::Empty {
        match self.maybe_value {
            ::std::option::Option::Some(OptionalEntry_oneof_maybe_value::no_value(ref v)) => v,
            _ => <::protobuf::well_known_types::Empty as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_no_value(&mut self) {
        self.maybe_value = ::std::option::Option::None;
    }

    pub fn has_no_value(&self) -> bool {
        match self.maybe_value {
            ::std::option::Option::Some(OptionalEntry_oneof_maybe_value::no_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_no_value(&mut self, v: ::protobuf::well_known_types::Empty) {
        self.maybe_value = ::std::option::Option::Some(OptionalEntry_oneof_maybe_value::no_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_no_value(&mut self) -> &mut ::protobuf::well_known_types::Empty {
        if let ::std::option::Option::Some(OptionalEntry_oneof_maybe_value::no_value(_)) = self.maybe_value {
        } else {
            self.maybe_value = ::std::option::Option::Some(OptionalEntry_oneof_maybe_value::no_value(::protobuf::well_known_types::Empty::new()));
        }
        match self.maybe_value {
            ::std::option::Option::Some(OptionalEntry_oneof_maybe_value::no_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_no_value(&mut self) -> ::protobuf::well_known_types::Empty {
        if self.has_no_value() {
            match self.maybe_value.take() {
                ::std::option::Option::Some(OptionalEntry_oneof_maybe_value::no_value(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Empty::new()
        }
    }
}

impl ::protobuf::Message for OptionalEntry {
    fn is_initialized(&self) -> bool {
        if let Some(OptionalEntry_oneof_maybe_value::no_value(ref v)) = self.maybe_value {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.maybe_value = ::std::option::Option::Some(OptionalEntry_oneof_maybe_value::value(is.read_bytes()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.maybe_value = ::std::option::Option::Some(OptionalEntry_oneof_maybe_value::no_value(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.key);
        }
        if let ::std::option::Option::Some(ref v) = self.maybe_value {
            match v {
                &OptionalEntry_oneof_maybe_value::value(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(2, &v);
                },
                &OptionalEntry_oneof_maybe_value::no_value(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_bytes(1, &self.key)?;
        }
        if let ::std::option::Option::Some(ref v) = self.maybe_value {
            match v {
                &OptionalEntry_oneof_maybe_value::value(ref v) => {
                    os.write_bytes(2, v)?;
                },
                &OptionalEntry_oneof_maybe_value::no_value(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OptionalEntry {
        OptionalEntry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "key",
                |m: &OptionalEntry| { &m.key },
                |m: &mut OptionalEntry| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "value",
                OptionalEntry::has_value,
                OptionalEntry::get_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Empty>(
                "no_value",
                OptionalEntry::has_no_value,
                OptionalEntry::get_no_value,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OptionalEntry>(
                "OptionalEntry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OptionalEntry {
        static instance: ::protobuf::rt::LazyV2<OptionalEntry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OptionalEntry::new)
    }
}

impl ::protobuf::Clear for OptionalEntry {
    fn clear(&mut self) {
        self.key.clear();
        self.maybe_value = ::std::option::Option::None;
        self.maybe_value = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OptionalEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OptionalEntry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct MapProofEntry {
    // message fields
    pub path: ::std::vec::Vec<u8>,
    pub hash: ::protobuf::SingularPtrField<super::types::Hash>,
    pub path_padding: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MapProofEntry {
    fn default() -> &'a MapProofEntry {
        <MapProofEntry as ::protobuf::Message>::default_instance()
    }
}

impl MapProofEntry {
    pub fn new() -> MapProofEntry {
        ::std::default::Default::default()
    }

    // bytes path = 1;


    pub fn get_path(&self) -> &[u8] {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::vec::Vec<u8>) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.path, ::std::vec::Vec::new())
    }

    // .exonum.crypto.Hash hash = 2;


    pub fn get_hash(&self) -> &super::types::Hash {
        self.hash.as_ref().unwrap_or_else(|| <super::types::Hash as ::protobuf::Message>::default_instance())
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    pub fn has_hash(&self) -> bool {
        self.hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: super::types::Hash) {
        self.hash = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut super::types::Hash {
        if self.hash.is_none() {
            self.hash.set_default();
        }
        self.hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_hash(&mut self) -> super::types::Hash {
        self.hash.take().unwrap_or_else(|| super::types::Hash::new())
    }

    // uint32 path_padding = 3;


    pub fn get_path_padding(&self) -> u32 {
        self.path_padding
    }
    pub fn clear_path_padding(&mut self) {
        self.path_padding = 0;
    }

    // Param is passed by value, moved
    pub fn set_path_padding(&mut self, v: u32) {
        self.path_padding = v;
    }
}

impl ::protobuf::Message for MapProofEntry {
    fn is_initialized(&self) -> bool {
        for v in &self.hash {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.hash)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.path_padding = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.path);
        }
        if let Some(ref v) = self.hash.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.path_padding != 0 {
            my_size += ::protobuf::rt::value_size(3, self.path_padding, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_bytes(1, &self.path)?;
        }
        if let Some(ref v) = self.hash.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.path_padding != 0 {
            os.write_uint32(3, self.path_padding)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MapProofEntry {
        MapProofEntry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "path",
                |m: &MapProofEntry| { &m.path },
                |m: &mut MapProofEntry| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::Hash>>(
                "hash",
                |m: &MapProofEntry| { &m.hash },
                |m: &mut MapProofEntry| { &mut m.hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "path_padding",
                |m: &MapProofEntry| { &m.path_padding },
                |m: &mut MapProofEntry| { &mut m.path_padding },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MapProofEntry>(
                "MapProofEntry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MapProofEntry {
        static instance: ::protobuf::rt::LazyV2<MapProofEntry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MapProofEntry::new)
    }
}

impl ::protobuf::Clear for MapProofEntry {
    fn clear(&mut self) {
        self.path.clear();
        self.hash.clear();
        self.path_padding = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MapProofEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MapProofEntry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cexonum/proof/map_proof.proto\x12\x0cexonum.proof\x1a\x19exonum/cry\
    pto/types.proto\x1a\x1bgoogle/protobuf/empty.proto\"t\n\x08MapProof\x125\
    \n\x07entries\x18\x01\x20\x03(\x0b2\x1b.exonum.proof.OptionalEntryR\x07e\
    ntries\x121\n\x05proof\x18\x02\x20\x03(\x0b2\x1b.exonum.proof.MapProofEn\
    tryR\x05proof\"}\n\rOptionalEntry\x12\x10\n\x03key\x18\x01\x20\x01(\x0cR\
    \x03key\x12\x16\n\x05value\x18\x02\x20\x01(\x0cH\0R\x05value\x123\n\x08n\
    o_value\x18\x03\x20\x01(\x0b2\x16.google.protobuf.EmptyH\0R\x07noValueB\
    \r\n\x0bmaybe_value\"o\n\rMapProofEntry\x12\x12\n\x04path\x18\x01\x20\
    \x01(\x0cR\x04path\x12'\n\x04hash\x18\x02\x20\x01(\x0b2\x13.exonum.crypt\
    o.HashR\x04hash\x12!\n\x0cpath_padding\x18\x03\x20\x01(\rR\x0bpathPaddin\
    gB\x1b\n\x19com.exonum.messages.proofb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
