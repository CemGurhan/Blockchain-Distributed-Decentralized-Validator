// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `exonum/runtime/auth.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Caller {
    // message oneof groups
    pub caller: ::std::option::Option<Caller_oneof_caller>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Caller {
    fn default() -> &'a Caller {
        <Caller as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum Caller_oneof_caller {
    transaction_author(super::types::PublicKey),
    instance_id(u32),
    blockchain(::protobuf::well_known_types::Empty),
}

impl Caller {
    pub fn new() -> Caller {
        ::std::default::Default::default()
    }

    // .exonum.crypto.PublicKey transaction_author = 1;


    pub fn get_transaction_author(&self) -> &super::types::PublicKey {
        match self.caller {
            ::std::option::Option::Some(Caller_oneof_caller::transaction_author(ref v)) => v,
            _ => <super::types::PublicKey as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_transaction_author(&mut self) {
        self.caller = ::std::option::Option::None;
    }

    pub fn has_transaction_author(&self) -> bool {
        match self.caller {
            ::std::option::Option::Some(Caller_oneof_caller::transaction_author(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_transaction_author(&mut self, v: super::types::PublicKey) {
        self.caller = ::std::option::Option::Some(Caller_oneof_caller::transaction_author(v))
    }

    // Mutable pointer to the field.
    pub fn mut_transaction_author(&mut self) -> &mut super::types::PublicKey {
        if let ::std::option::Option::Some(Caller_oneof_caller::transaction_author(_)) = self.caller {
        } else {
            self.caller = ::std::option::Option::Some(Caller_oneof_caller::transaction_author(super::types::PublicKey::new()));
        }
        match self.caller {
            ::std::option::Option::Some(Caller_oneof_caller::transaction_author(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_transaction_author(&mut self) -> super::types::PublicKey {
        if self.has_transaction_author() {
            match self.caller.take() {
                ::std::option::Option::Some(Caller_oneof_caller::transaction_author(v)) => v,
                _ => panic!(),
            }
        } else {
            super::types::PublicKey::new()
        }
    }

    // uint32 instance_id = 2;


    pub fn get_instance_id(&self) -> u32 {
        match self.caller {
            ::std::option::Option::Some(Caller_oneof_caller::instance_id(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_instance_id(&mut self) {
        self.caller = ::std::option::Option::None;
    }

    pub fn has_instance_id(&self) -> bool {
        match self.caller {
            ::std::option::Option::Some(Caller_oneof_caller::instance_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_instance_id(&mut self, v: u32) {
        self.caller = ::std::option::Option::Some(Caller_oneof_caller::instance_id(v))
    }

    // .google.protobuf.Empty blockchain = 3;


    pub fn get_blockchain(&self) -> &::protobuf::well_known_types::Empty {
        match self.caller {
            ::std::option::Option::Some(Caller_oneof_caller::blockchain(ref v)) => v,
            _ => <::protobuf::well_known_types::Empty as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_blockchain(&mut self) {
        self.caller = ::std::option::Option::None;
    }

    pub fn has_blockchain(&self) -> bool {
        match self.caller {
            ::std::option::Option::Some(Caller_oneof_caller::blockchain(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_blockchain(&mut self, v: ::protobuf::well_known_types::Empty) {
        self.caller = ::std::option::Option::Some(Caller_oneof_caller::blockchain(v))
    }

    // Mutable pointer to the field.
    pub fn mut_blockchain(&mut self) -> &mut ::protobuf::well_known_types::Empty {
        if let ::std::option::Option::Some(Caller_oneof_caller::blockchain(_)) = self.caller {
        } else {
            self.caller = ::std::option::Option::Some(Caller_oneof_caller::blockchain(::protobuf::well_known_types::Empty::new()));
        }
        match self.caller {
            ::std::option::Option::Some(Caller_oneof_caller::blockchain(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_blockchain(&mut self) -> ::protobuf::well_known_types::Empty {
        if self.has_blockchain() {
            match self.caller.take() {
                ::std::option::Option::Some(Caller_oneof_caller::blockchain(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Empty::new()
        }
    }
}

impl ::protobuf::Message for Caller {
    fn is_initialized(&self) -> bool {
        if let Some(Caller_oneof_caller::transaction_author(ref v)) = self.caller {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Caller_oneof_caller::blockchain(ref v)) = self.caller {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.caller = ::std::option::Option::Some(Caller_oneof_caller::transaction_author(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.caller = ::std::option::Option::Some(Caller_oneof_caller::instance_id(is.read_uint32()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.caller = ::std::option::Option::Some(Caller_oneof_caller::blockchain(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.caller {
            match v {
                &Caller_oneof_caller::transaction_author(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Caller_oneof_caller::instance_id(v) => {
                    my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &Caller_oneof_caller::blockchain(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.caller {
            match v {
                &Caller_oneof_caller::transaction_author(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Caller_oneof_caller::instance_id(v) => {
                    os.write_uint32(2, v)?;
                },
                &Caller_oneof_caller::blockchain(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Caller {
        Caller::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::types::PublicKey>(
                "transaction_author",
                Caller::has_transaction_author,
                Caller::get_transaction_author,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor::<_>(
                "instance_id",
                Caller::has_instance_id,
                Caller::get_instance_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Empty>(
                "blockchain",
                Caller::has_blockchain,
                Caller::get_blockchain,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Caller>(
                "Caller",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Caller {
        static instance: ::protobuf::rt::LazyV2<Caller> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Caller::new)
    }
}

impl ::protobuf::Clear for Caller {
    fn clear(&mut self) {
        self.caller = ::std::option::Option::None;
        self.caller = ::std::option::Option::None;
        self.caller = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Caller {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Caller {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19exonum/runtime/auth.proto\x12\x0eexonum.runtime\x1a\x19exonum/cryp\
    to/types.proto\x1a\x1bgoogle/protobuf/empty.proto\"\xba\x01\n\x06Caller\
    \x12I\n\x12transaction_author\x18\x01\x20\x01(\x0b2\x18.exonum.crypto.Pu\
    blicKeyH\0R\x11transactionAuthor\x12!\n\x0binstance_id\x18\x02\x20\x01(\
    \rH\0R\ninstanceId\x128\n\nblockchain\x18\x03\x20\x01(\x0b2\x16.google.p\
    rotobuf.EmptyH\0R\nblockchainB\x08\n\x06callerB\"\n\x20com.exonum.messag\
    es.core.runtimeb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
