// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `consensus.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Connect {
    // message fields
    pub host: ::std::string::String,
    pub time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub user_agent: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Connect {
    fn default() -> &'a Connect {
        <Connect as ::protobuf::Message>::default_instance()
    }
}

impl Connect {
    pub fn new() -> Connect {
        ::std::default::Default::default()
    }

    // string host = 1;


    pub fn get_host(&self) -> &str {
        &self.host
    }
    pub fn clear_host(&mut self) {
        self.host.clear();
    }

    // Param is passed by value, moved
    pub fn set_host(&mut self, v: ::std::string::String) {
        self.host = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host(&mut self) -> &mut ::std::string::String {
        &mut self.host
    }

    // Take field
    pub fn take_host(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.host, ::std::string::String::new())
    }

    // .google.protobuf.Timestamp time = 2;


    pub fn get_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_time(&mut self) {
        self.time.clear();
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.time.is_none() {
            self.time.set_default();
        }
        self.time.as_mut().unwrap()
    }

    // Take field
    pub fn take_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // string user_agent = 3;


    pub fn get_user_agent(&self) -> &str {
        &self.user_agent
    }
    pub fn clear_user_agent(&mut self) {
        self.user_agent.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_agent(&mut self, v: ::std::string::String) {
        self.user_agent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_agent(&mut self) -> &mut ::std::string::String {
        &mut self.user_agent
    }

    // Take field
    pub fn take_user_agent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.user_agent, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Connect {
    fn is_initialized(&self) -> bool {
        for v in &self.time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.host)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.time)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.user_agent)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.host.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.host);
        }
        if let Some(ref v) = self.time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.user_agent.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.user_agent);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.host.is_empty() {
            os.write_string(1, &self.host)?;
        }
        if let Some(ref v) = self.time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.user_agent.is_empty() {
            os.write_string(3, &self.user_agent)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Connect {
        Connect::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "host",
                |m: &Connect| { &m.host },
                |m: &mut Connect| { &mut m.host },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "time",
                |m: &Connect| { &m.time },
                |m: &mut Connect| { &mut m.time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "user_agent",
                |m: &Connect| { &m.user_agent },
                |m: &mut Connect| { &mut m.user_agent },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Connect>(
                "Connect",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Connect {
        static instance: ::protobuf::rt::LazyV2<Connect> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Connect::new)
    }
}

impl ::protobuf::Clear for Connect {
    fn clear(&mut self) {
        self.host.clear();
        self.time.clear();
        self.user_agent.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Connect {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Connect {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Status {
    // message fields
    pub epoch: u64,
    pub last_hash: ::protobuf::SingularPtrField<super::types::Hash>,
    pub pool_size: u64,
    pub blockchain_height: u64,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Status {
    fn default() -> &'a Status {
        <Status as ::protobuf::Message>::default_instance()
    }
}

impl Status {
    pub fn new() -> Status {
        ::std::default::Default::default()
    }

    // uint64 epoch = 1;


    pub fn get_epoch(&self) -> u64 {
        self.epoch
    }
    pub fn clear_epoch(&mut self) {
        self.epoch = 0;
    }

    // Param is passed by value, moved
    pub fn set_epoch(&mut self, v: u64) {
        self.epoch = v;
    }

    // .exonum.crypto.Hash last_hash = 2;


    pub fn get_last_hash(&self) -> &super::types::Hash {
        self.last_hash.as_ref().unwrap_or_else(|| <super::types::Hash as ::protobuf::Message>::default_instance())
    }
    pub fn clear_last_hash(&mut self) {
        self.last_hash.clear();
    }

    pub fn has_last_hash(&self) -> bool {
        self.last_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_hash(&mut self, v: super::types::Hash) {
        self.last_hash = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_hash(&mut self) -> &mut super::types::Hash {
        if self.last_hash.is_none() {
            self.last_hash.set_default();
        }
        self.last_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_last_hash(&mut self) -> super::types::Hash {
        self.last_hash.take().unwrap_or_else(|| super::types::Hash::new())
    }

    // uint64 pool_size = 3;


    pub fn get_pool_size(&self) -> u64 {
        self.pool_size
    }
    pub fn clear_pool_size(&mut self) {
        self.pool_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_pool_size(&mut self, v: u64) {
        self.pool_size = v;
    }

    // uint64 blockchain_height = 4;


    pub fn get_blockchain_height(&self) -> u64 {
        self.blockchain_height
    }
    pub fn clear_blockchain_height(&mut self) {
        self.blockchain_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_blockchain_height(&mut self, v: u64) {
        self.blockchain_height = v;
    }
}

impl ::protobuf::Message for Status {
    fn is_initialized(&self) -> bool {
        for v in &self.last_hash {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.epoch = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.last_hash)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.pool_size = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.blockchain_height = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.epoch != 0 {
            my_size += ::protobuf::rt::value_size(1, self.epoch, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.last_hash.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.pool_size != 0 {
            my_size += ::protobuf::rt::value_size(3, self.pool_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.blockchain_height != 0 {
            my_size += ::protobuf::rt::value_size(4, self.blockchain_height, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.epoch != 0 {
            os.write_uint64(1, self.epoch)?;
        }
        if let Some(ref v) = self.last_hash.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.pool_size != 0 {
            os.write_uint64(3, self.pool_size)?;
        }
        if self.blockchain_height != 0 {
            os.write_uint64(4, self.blockchain_height)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Status {
        Status::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "epoch",
                |m: &Status| { &m.epoch },
                |m: &mut Status| { &mut m.epoch },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::Hash>>(
                "last_hash",
                |m: &Status| { &m.last_hash },
                |m: &mut Status| { &mut m.last_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "pool_size",
                |m: &Status| { &m.pool_size },
                |m: &mut Status| { &mut m.pool_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "blockchain_height",
                |m: &Status| { &m.blockchain_height },
                |m: &mut Status| { &mut m.blockchain_height },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Status>(
                "Status",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Status {
        static instance: ::protobuf::rt::LazyV2<Status> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Status::new)
    }
}

impl ::protobuf::Clear for Status {
    fn clear(&mut self) {
        self.epoch = 0;
        self.last_hash.clear();
        self.pool_size = 0;
        self.blockchain_height = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Status {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Propose {
    // message fields
    pub validator: u32,
    pub epoch: u64,
    pub round: u32,
    pub prev_hash: ::protobuf::SingularPtrField<super::types::Hash>,
    pub transactions: ::protobuf::RepeatedField<super::types::Hash>,
    pub skip: bool,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Propose {
    fn default() -> &'a Propose {
        <Propose as ::protobuf::Message>::default_instance()
    }
}

impl Propose {
    pub fn new() -> Propose {
        ::std::default::Default::default()
    }

    // uint32 validator = 1;


    pub fn get_validator(&self) -> u32 {
        self.validator
    }
    pub fn clear_validator(&mut self) {
        self.validator = 0;
    }

    // Param is passed by value, moved
    pub fn set_validator(&mut self, v: u32) {
        self.validator = v;
    }

    // uint64 epoch = 2;


    pub fn get_epoch(&self) -> u64 {
        self.epoch
    }
    pub fn clear_epoch(&mut self) {
        self.epoch = 0;
    }

    // Param is passed by value, moved
    pub fn set_epoch(&mut self, v: u64) {
        self.epoch = v;
    }

    // uint32 round = 3;


    pub fn get_round(&self) -> u32 {
        self.round
    }
    pub fn clear_round(&mut self) {
        self.round = 0;
    }

    // Param is passed by value, moved
    pub fn set_round(&mut self, v: u32) {
        self.round = v;
    }

    // .exonum.crypto.Hash prev_hash = 4;


    pub fn get_prev_hash(&self) -> &super::types::Hash {
        self.prev_hash.as_ref().unwrap_or_else(|| <super::types::Hash as ::protobuf::Message>::default_instance())
    }
    pub fn clear_prev_hash(&mut self) {
        self.prev_hash.clear();
    }

    pub fn has_prev_hash(&self) -> bool {
        self.prev_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_prev_hash(&mut self, v: super::types::Hash) {
        self.prev_hash = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prev_hash(&mut self) -> &mut super::types::Hash {
        if self.prev_hash.is_none() {
            self.prev_hash.set_default();
        }
        self.prev_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_prev_hash(&mut self) -> super::types::Hash {
        self.prev_hash.take().unwrap_or_else(|| super::types::Hash::new())
    }

    // repeated .exonum.crypto.Hash transactions = 5;


    pub fn get_transactions(&self) -> &[super::types::Hash] {
        &self.transactions
    }
    pub fn clear_transactions(&mut self) {
        self.transactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactions(&mut self, v: ::protobuf::RepeatedField<super::types::Hash>) {
        self.transactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transactions(&mut self) -> &mut ::protobuf::RepeatedField<super::types::Hash> {
        &mut self.transactions
    }

    // Take field
    pub fn take_transactions(&mut self) -> ::protobuf::RepeatedField<super::types::Hash> {
        ::std::mem::replace(&mut self.transactions, ::protobuf::RepeatedField::new())
    }

    // bool skip = 6;


    pub fn get_skip(&self) -> bool {
        self.skip
    }
    pub fn clear_skip(&mut self) {
        self.skip = false;
    }

    // Param is passed by value, moved
    pub fn set_skip(&mut self, v: bool) {
        self.skip = v;
    }
}

impl ::protobuf::Message for Propose {
    fn is_initialized(&self) -> bool {
        for v in &self.prev_hash {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transactions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.validator = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.epoch = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.round = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.prev_hash)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.transactions)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.skip = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.validator != 0 {
            my_size += ::protobuf::rt::value_size(1, self.validator, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.epoch != 0 {
            my_size += ::protobuf::rt::value_size(2, self.epoch, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.round != 0 {
            my_size += ::protobuf::rt::value_size(3, self.round, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.prev_hash.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.skip != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.validator != 0 {
            os.write_uint32(1, self.validator)?;
        }
        if self.epoch != 0 {
            os.write_uint64(2, self.epoch)?;
        }
        if self.round != 0 {
            os.write_uint32(3, self.round)?;
        }
        if let Some(ref v) = self.prev_hash.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.transactions {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.skip != false {
            os.write_bool(6, self.skip)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Propose {
        Propose::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "validator",
                |m: &Propose| { &m.validator },
                |m: &mut Propose| { &mut m.validator },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "epoch",
                |m: &Propose| { &m.epoch },
                |m: &mut Propose| { &mut m.epoch },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "round",
                |m: &Propose| { &m.round },
                |m: &mut Propose| { &mut m.round },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::Hash>>(
                "prev_hash",
                |m: &Propose| { &m.prev_hash },
                |m: &mut Propose| { &mut m.prev_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::Hash>>(
                "transactions",
                |m: &Propose| { &m.transactions },
                |m: &mut Propose| { &mut m.transactions },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "skip",
                |m: &Propose| { &m.skip },
                |m: &mut Propose| { &mut m.skip },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Propose>(
                "Propose",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Propose {
        static instance: ::protobuf::rt::LazyV2<Propose> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Propose::new)
    }
}

impl ::protobuf::Clear for Propose {
    fn clear(&mut self) {
        self.validator = 0;
        self.epoch = 0;
        self.round = 0;
        self.prev_hash.clear();
        self.transactions.clear();
        self.skip = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Propose {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Propose {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Prevote {
    // message fields
    pub validator: u32,
    pub epoch: u64,
    pub round: u32,
    pub propose_hash: ::protobuf::SingularPtrField<super::types::Hash>,
    pub locked_round: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Prevote {
    fn default() -> &'a Prevote {
        <Prevote as ::protobuf::Message>::default_instance()
    }
}

impl Prevote {
    pub fn new() -> Prevote {
        ::std::default::Default::default()
    }

    // uint32 validator = 1;


    pub fn get_validator(&self) -> u32 {
        self.validator
    }
    pub fn clear_validator(&mut self) {
        self.validator = 0;
    }

    // Param is passed by value, moved
    pub fn set_validator(&mut self, v: u32) {
        self.validator = v;
    }

    // uint64 epoch = 2;


    pub fn get_epoch(&self) -> u64 {
        self.epoch
    }
    pub fn clear_epoch(&mut self) {
        self.epoch = 0;
    }

    // Param is passed by value, moved
    pub fn set_epoch(&mut self, v: u64) {
        self.epoch = v;
    }

    // uint32 round = 3;


    pub fn get_round(&self) -> u32 {
        self.round
    }
    pub fn clear_round(&mut self) {
        self.round = 0;
    }

    // Param is passed by value, moved
    pub fn set_round(&mut self, v: u32) {
        self.round = v;
    }

    // .exonum.crypto.Hash propose_hash = 4;


    pub fn get_propose_hash(&self) -> &super::types::Hash {
        self.propose_hash.as_ref().unwrap_or_else(|| <super::types::Hash as ::protobuf::Message>::default_instance())
    }
    pub fn clear_propose_hash(&mut self) {
        self.propose_hash.clear();
    }

    pub fn has_propose_hash(&self) -> bool {
        self.propose_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_propose_hash(&mut self, v: super::types::Hash) {
        self.propose_hash = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_propose_hash(&mut self) -> &mut super::types::Hash {
        if self.propose_hash.is_none() {
            self.propose_hash.set_default();
        }
        self.propose_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_propose_hash(&mut self) -> super::types::Hash {
        self.propose_hash.take().unwrap_or_else(|| super::types::Hash::new())
    }

    // uint32 locked_round = 5;


    pub fn get_locked_round(&self) -> u32 {
        self.locked_round
    }
    pub fn clear_locked_round(&mut self) {
        self.locked_round = 0;
    }

    // Param is passed by value, moved
    pub fn set_locked_round(&mut self, v: u32) {
        self.locked_round = v;
    }
}

impl ::protobuf::Message for Prevote {
    fn is_initialized(&self) -> bool {
        for v in &self.propose_hash {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.validator = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.epoch = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.round = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.propose_hash)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.locked_round = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.validator != 0 {
            my_size += ::protobuf::rt::value_size(1, self.validator, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.epoch != 0 {
            my_size += ::protobuf::rt::value_size(2, self.epoch, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.round != 0 {
            my_size += ::protobuf::rt::value_size(3, self.round, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.propose_hash.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.locked_round != 0 {
            my_size += ::protobuf::rt::value_size(5, self.locked_round, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.validator != 0 {
            os.write_uint32(1, self.validator)?;
        }
        if self.epoch != 0 {
            os.write_uint64(2, self.epoch)?;
        }
        if self.round != 0 {
            os.write_uint32(3, self.round)?;
        }
        if let Some(ref v) = self.propose_hash.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.locked_round != 0 {
            os.write_uint32(5, self.locked_round)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Prevote {
        Prevote::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "validator",
                |m: &Prevote| { &m.validator },
                |m: &mut Prevote| { &mut m.validator },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "epoch",
                |m: &Prevote| { &m.epoch },
                |m: &mut Prevote| { &mut m.epoch },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "round",
                |m: &Prevote| { &m.round },
                |m: &mut Prevote| { &mut m.round },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::Hash>>(
                "propose_hash",
                |m: &Prevote| { &m.propose_hash },
                |m: &mut Prevote| { &mut m.propose_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "locked_round",
                |m: &Prevote| { &m.locked_round },
                |m: &mut Prevote| { &mut m.locked_round },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Prevote>(
                "Prevote",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Prevote {
        static instance: ::protobuf::rt::LazyV2<Prevote> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Prevote::new)
    }
}

impl ::protobuf::Clear for Prevote {
    fn clear(&mut self) {
        self.validator = 0;
        self.epoch = 0;
        self.round = 0;
        self.propose_hash.clear();
        self.locked_round = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Prevote {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Prevote {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct BlockResponse {
    // message fields
    pub to: ::protobuf::SingularPtrField<super::types::PublicKey>,
    pub block: ::protobuf::SingularPtrField<super::blockchain::Block>,
    pub precommits: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub transactions: ::protobuf::RepeatedField<super::types::Hash>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BlockResponse {
    fn default() -> &'a BlockResponse {
        <BlockResponse as ::protobuf::Message>::default_instance()
    }
}

impl BlockResponse {
    pub fn new() -> BlockResponse {
        ::std::default::Default::default()
    }

    // .exonum.crypto.PublicKey to = 1;


    pub fn get_to(&self) -> &super::types::PublicKey {
        self.to.as_ref().unwrap_or_else(|| <super::types::PublicKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_to(&mut self) {
        self.to.clear();
    }

    pub fn has_to(&self) -> bool {
        self.to.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to(&mut self, v: super::types::PublicKey) {
        self.to = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to(&mut self) -> &mut super::types::PublicKey {
        if self.to.is_none() {
            self.to.set_default();
        }
        self.to.as_mut().unwrap()
    }

    // Take field
    pub fn take_to(&mut self) -> super::types::PublicKey {
        self.to.take().unwrap_or_else(|| super::types::PublicKey::new())
    }

    // .exonum.Block block = 2;


    pub fn get_block(&self) -> &super::blockchain::Block {
        self.block.as_ref().unwrap_or_else(|| <super::blockchain::Block as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: super::blockchain::Block) {
        self.block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut super::blockchain::Block {
        if self.block.is_none() {
            self.block.set_default();
        }
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> super::blockchain::Block {
        self.block.take().unwrap_or_else(|| super::blockchain::Block::new())
    }

    // repeated bytes precommits = 3;


    pub fn get_precommits(&self) -> &[::std::vec::Vec<u8>] {
        &self.precommits
    }
    pub fn clear_precommits(&mut self) {
        self.precommits.clear();
    }

    // Param is passed by value, moved
    pub fn set_precommits(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.precommits = v;
    }

    // Mutable pointer to the field.
    pub fn mut_precommits(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.precommits
    }

    // Take field
    pub fn take_precommits(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.precommits, ::protobuf::RepeatedField::new())
    }

    // repeated .exonum.crypto.Hash transactions = 4;


    pub fn get_transactions(&self) -> &[super::types::Hash] {
        &self.transactions
    }
    pub fn clear_transactions(&mut self) {
        self.transactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactions(&mut self, v: ::protobuf::RepeatedField<super::types::Hash>) {
        self.transactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transactions(&mut self) -> &mut ::protobuf::RepeatedField<super::types::Hash> {
        &mut self.transactions
    }

    // Take field
    pub fn take_transactions(&mut self) -> ::protobuf::RepeatedField<super::types::Hash> {
        ::std::mem::replace(&mut self.transactions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for BlockResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.to {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.block {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transactions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.to)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.precommits)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.transactions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.to.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.precommits {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.to.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.block.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.precommits {
            os.write_bytes(3, &v)?;
        };
        for v in &self.transactions {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockResponse {
        BlockResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::PublicKey>>(
                "to",
                |m: &BlockResponse| { &m.to },
                |m: &mut BlockResponse| { &mut m.to },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::blockchain::Block>>(
                "block",
                |m: &BlockResponse| { &m.block },
                |m: &mut BlockResponse| { &mut m.block },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "precommits",
                |m: &BlockResponse| { &m.precommits },
                |m: &mut BlockResponse| { &mut m.precommits },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::Hash>>(
                "transactions",
                |m: &BlockResponse| { &m.transactions },
                |m: &mut BlockResponse| { &mut m.transactions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BlockResponse>(
                "BlockResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BlockResponse {
        static instance: ::protobuf::rt::LazyV2<BlockResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BlockResponse::new)
    }
}

impl ::protobuf::Clear for BlockResponse {
    fn clear(&mut self) {
        self.to.clear();
        self.block.clear();
        self.precommits.clear();
        self.transactions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct TransactionsResponse {
    // message fields
    pub to: ::protobuf::SingularPtrField<super::types::PublicKey>,
    pub transactions: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransactionsResponse {
    fn default() -> &'a TransactionsResponse {
        <TransactionsResponse as ::protobuf::Message>::default_instance()
    }
}

impl TransactionsResponse {
    pub fn new() -> TransactionsResponse {
        ::std::default::Default::default()
    }

    // .exonum.crypto.PublicKey to = 1;


    pub fn get_to(&self) -> &super::types::PublicKey {
        self.to.as_ref().unwrap_or_else(|| <super::types::PublicKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_to(&mut self) {
        self.to.clear();
    }

    pub fn has_to(&self) -> bool {
        self.to.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to(&mut self, v: super::types::PublicKey) {
        self.to = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to(&mut self) -> &mut super::types::PublicKey {
        if self.to.is_none() {
            self.to.set_default();
        }
        self.to.as_mut().unwrap()
    }

    // Take field
    pub fn take_to(&mut self) -> super::types::PublicKey {
        self.to.take().unwrap_or_else(|| super::types::PublicKey::new())
    }

    // repeated bytes transactions = 2;


    pub fn get_transactions(&self) -> &[::std::vec::Vec<u8>] {
        &self.transactions
    }
    pub fn clear_transactions(&mut self) {
        self.transactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactions(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.transactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transactions(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.transactions
    }

    // Take field
    pub fn take_transactions(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.transactions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TransactionsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.to {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.to)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.transactions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.to.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.transactions {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.to.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.transactions {
            os.write_bytes(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionsResponse {
        TransactionsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::PublicKey>>(
                "to",
                |m: &TransactionsResponse| { &m.to },
                |m: &mut TransactionsResponse| { &mut m.to },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "transactions",
                |m: &TransactionsResponse| { &m.transactions },
                |m: &mut TransactionsResponse| { &mut m.transactions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TransactionsResponse>(
                "TransactionsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TransactionsResponse {
        static instance: ::protobuf::rt::LazyV2<TransactionsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TransactionsResponse::new)
    }
}

impl ::protobuf::Clear for TransactionsResponse {
    fn clear(&mut self) {
        self.to.clear();
        self.transactions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ProposeRequest {
    // message fields
    pub to: ::protobuf::SingularPtrField<super::types::PublicKey>,
    pub epoch: u64,
    pub propose_hash: ::protobuf::SingularPtrField<super::types::Hash>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProposeRequest {
    fn default() -> &'a ProposeRequest {
        <ProposeRequest as ::protobuf::Message>::default_instance()
    }
}

impl ProposeRequest {
    pub fn new() -> ProposeRequest {
        ::std::default::Default::default()
    }

    // .exonum.crypto.PublicKey to = 1;


    pub fn get_to(&self) -> &super::types::PublicKey {
        self.to.as_ref().unwrap_or_else(|| <super::types::PublicKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_to(&mut self) {
        self.to.clear();
    }

    pub fn has_to(&self) -> bool {
        self.to.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to(&mut self, v: super::types::PublicKey) {
        self.to = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to(&mut self) -> &mut super::types::PublicKey {
        if self.to.is_none() {
            self.to.set_default();
        }
        self.to.as_mut().unwrap()
    }

    // Take field
    pub fn take_to(&mut self) -> super::types::PublicKey {
        self.to.take().unwrap_or_else(|| super::types::PublicKey::new())
    }

    // uint64 epoch = 2;


    pub fn get_epoch(&self) -> u64 {
        self.epoch
    }
    pub fn clear_epoch(&mut self) {
        self.epoch = 0;
    }

    // Param is passed by value, moved
    pub fn set_epoch(&mut self, v: u64) {
        self.epoch = v;
    }

    // .exonum.crypto.Hash propose_hash = 3;


    pub fn get_propose_hash(&self) -> &super::types::Hash {
        self.propose_hash.as_ref().unwrap_or_else(|| <super::types::Hash as ::protobuf::Message>::default_instance())
    }
    pub fn clear_propose_hash(&mut self) {
        self.propose_hash.clear();
    }

    pub fn has_propose_hash(&self) -> bool {
        self.propose_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_propose_hash(&mut self, v: super::types::Hash) {
        self.propose_hash = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_propose_hash(&mut self) -> &mut super::types::Hash {
        if self.propose_hash.is_none() {
            self.propose_hash.set_default();
        }
        self.propose_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_propose_hash(&mut self) -> super::types::Hash {
        self.propose_hash.take().unwrap_or_else(|| super::types::Hash::new())
    }
}

impl ::protobuf::Message for ProposeRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.to {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.propose_hash {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.to)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.epoch = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.propose_hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.to.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.epoch != 0 {
            my_size += ::protobuf::rt::value_size(2, self.epoch, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.propose_hash.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.to.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.epoch != 0 {
            os.write_uint64(2, self.epoch)?;
        }
        if let Some(ref v) = self.propose_hash.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProposeRequest {
        ProposeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::PublicKey>>(
                "to",
                |m: &ProposeRequest| { &m.to },
                |m: &mut ProposeRequest| { &mut m.to },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "epoch",
                |m: &ProposeRequest| { &m.epoch },
                |m: &mut ProposeRequest| { &mut m.epoch },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::Hash>>(
                "propose_hash",
                |m: &ProposeRequest| { &m.propose_hash },
                |m: &mut ProposeRequest| { &mut m.propose_hash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProposeRequest>(
                "ProposeRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProposeRequest {
        static instance: ::protobuf::rt::LazyV2<ProposeRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProposeRequest::new)
    }
}

impl ::protobuf::Clear for ProposeRequest {
    fn clear(&mut self) {
        self.to.clear();
        self.epoch = 0;
        self.propose_hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProposeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProposeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct TransactionsRequest {
    // message fields
    pub to: ::protobuf::SingularPtrField<super::types::PublicKey>,
    pub txs: ::protobuf::RepeatedField<super::types::Hash>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransactionsRequest {
    fn default() -> &'a TransactionsRequest {
        <TransactionsRequest as ::protobuf::Message>::default_instance()
    }
}

impl TransactionsRequest {
    pub fn new() -> TransactionsRequest {
        ::std::default::Default::default()
    }

    // .exonum.crypto.PublicKey to = 1;


    pub fn get_to(&self) -> &super::types::PublicKey {
        self.to.as_ref().unwrap_or_else(|| <super::types::PublicKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_to(&mut self) {
        self.to.clear();
    }

    pub fn has_to(&self) -> bool {
        self.to.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to(&mut self, v: super::types::PublicKey) {
        self.to = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to(&mut self) -> &mut super::types::PublicKey {
        if self.to.is_none() {
            self.to.set_default();
        }
        self.to.as_mut().unwrap()
    }

    // Take field
    pub fn take_to(&mut self) -> super::types::PublicKey {
        self.to.take().unwrap_or_else(|| super::types::PublicKey::new())
    }

    // repeated .exonum.crypto.Hash txs = 2;


    pub fn get_txs(&self) -> &[super::types::Hash] {
        &self.txs
    }
    pub fn clear_txs(&mut self) {
        self.txs.clear();
    }

    // Param is passed by value, moved
    pub fn set_txs(&mut self, v: ::protobuf::RepeatedField<super::types::Hash>) {
        self.txs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_txs(&mut self) -> &mut ::protobuf::RepeatedField<super::types::Hash> {
        &mut self.txs
    }

    // Take field
    pub fn take_txs(&mut self) -> ::protobuf::RepeatedField<super::types::Hash> {
        ::std::mem::replace(&mut self.txs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TransactionsRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.to {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.txs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.to)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.txs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.to.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.txs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.to.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.txs {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionsRequest {
        TransactionsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::PublicKey>>(
                "to",
                |m: &TransactionsRequest| { &m.to },
                |m: &mut TransactionsRequest| { &mut m.to },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::Hash>>(
                "txs",
                |m: &TransactionsRequest| { &m.txs },
                |m: &mut TransactionsRequest| { &mut m.txs },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TransactionsRequest>(
                "TransactionsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TransactionsRequest {
        static instance: ::protobuf::rt::LazyV2<TransactionsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TransactionsRequest::new)
    }
}

impl ::protobuf::Clear for TransactionsRequest {
    fn clear(&mut self) {
        self.to.clear();
        self.txs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct PrevotesRequest {
    // message fields
    pub to: ::protobuf::SingularPtrField<super::types::PublicKey>,
    pub epoch: u64,
    pub round: u32,
    pub propose_hash: ::protobuf::SingularPtrField<super::types::Hash>,
    pub validators: ::protobuf::SingularPtrField<super::bit_vec::BitVec>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PrevotesRequest {
    fn default() -> &'a PrevotesRequest {
        <PrevotesRequest as ::protobuf::Message>::default_instance()
    }
}

impl PrevotesRequest {
    pub fn new() -> PrevotesRequest {
        ::std::default::Default::default()
    }

    // .exonum.crypto.PublicKey to = 1;


    pub fn get_to(&self) -> &super::types::PublicKey {
        self.to.as_ref().unwrap_or_else(|| <super::types::PublicKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_to(&mut self) {
        self.to.clear();
    }

    pub fn has_to(&self) -> bool {
        self.to.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to(&mut self, v: super::types::PublicKey) {
        self.to = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to(&mut self) -> &mut super::types::PublicKey {
        if self.to.is_none() {
            self.to.set_default();
        }
        self.to.as_mut().unwrap()
    }

    // Take field
    pub fn take_to(&mut self) -> super::types::PublicKey {
        self.to.take().unwrap_or_else(|| super::types::PublicKey::new())
    }

    // uint64 epoch = 2;


    pub fn get_epoch(&self) -> u64 {
        self.epoch
    }
    pub fn clear_epoch(&mut self) {
        self.epoch = 0;
    }

    // Param is passed by value, moved
    pub fn set_epoch(&mut self, v: u64) {
        self.epoch = v;
    }

    // uint32 round = 3;


    pub fn get_round(&self) -> u32 {
        self.round
    }
    pub fn clear_round(&mut self) {
        self.round = 0;
    }

    // Param is passed by value, moved
    pub fn set_round(&mut self, v: u32) {
        self.round = v;
    }

    // .exonum.crypto.Hash propose_hash = 4;


    pub fn get_propose_hash(&self) -> &super::types::Hash {
        self.propose_hash.as_ref().unwrap_or_else(|| <super::types::Hash as ::protobuf::Message>::default_instance())
    }
    pub fn clear_propose_hash(&mut self) {
        self.propose_hash.clear();
    }

    pub fn has_propose_hash(&self) -> bool {
        self.propose_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_propose_hash(&mut self, v: super::types::Hash) {
        self.propose_hash = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_propose_hash(&mut self) -> &mut super::types::Hash {
        if self.propose_hash.is_none() {
            self.propose_hash.set_default();
        }
        self.propose_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_propose_hash(&mut self) -> super::types::Hash {
        self.propose_hash.take().unwrap_or_else(|| super::types::Hash::new())
    }

    // .exonum.common.BitVec validators = 5;


    pub fn get_validators(&self) -> &super::bit_vec::BitVec {
        self.validators.as_ref().unwrap_or_else(|| <super::bit_vec::BitVec as ::protobuf::Message>::default_instance())
    }
    pub fn clear_validators(&mut self) {
        self.validators.clear();
    }

    pub fn has_validators(&self) -> bool {
        self.validators.is_some()
    }

    // Param is passed by value, moved
    pub fn set_validators(&mut self, v: super::bit_vec::BitVec) {
        self.validators = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validators(&mut self) -> &mut super::bit_vec::BitVec {
        if self.validators.is_none() {
            self.validators.set_default();
        }
        self.validators.as_mut().unwrap()
    }

    // Take field
    pub fn take_validators(&mut self) -> super::bit_vec::BitVec {
        self.validators.take().unwrap_or_else(|| super::bit_vec::BitVec::new())
    }
}

impl ::protobuf::Message for PrevotesRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.to {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.propose_hash {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.validators {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.to)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.epoch = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.round = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.propose_hash)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.validators)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.to.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.epoch != 0 {
            my_size += ::protobuf::rt::value_size(2, self.epoch, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.round != 0 {
            my_size += ::protobuf::rt::value_size(3, self.round, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.propose_hash.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.validators.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.to.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.epoch != 0 {
            os.write_uint64(2, self.epoch)?;
        }
        if self.round != 0 {
            os.write_uint32(3, self.round)?;
        }
        if let Some(ref v) = self.propose_hash.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.validators.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PrevotesRequest {
        PrevotesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::PublicKey>>(
                "to",
                |m: &PrevotesRequest| { &m.to },
                |m: &mut PrevotesRequest| { &mut m.to },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "epoch",
                |m: &PrevotesRequest| { &m.epoch },
                |m: &mut PrevotesRequest| { &mut m.epoch },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "round",
                |m: &PrevotesRequest| { &m.round },
                |m: &mut PrevotesRequest| { &mut m.round },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::Hash>>(
                "propose_hash",
                |m: &PrevotesRequest| { &m.propose_hash },
                |m: &mut PrevotesRequest| { &mut m.propose_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::bit_vec::BitVec>>(
                "validators",
                |m: &PrevotesRequest| { &m.validators },
                |m: &mut PrevotesRequest| { &mut m.validators },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PrevotesRequest>(
                "PrevotesRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PrevotesRequest {
        static instance: ::protobuf::rt::LazyV2<PrevotesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PrevotesRequest::new)
    }
}

impl ::protobuf::Clear for PrevotesRequest {
    fn clear(&mut self) {
        self.to.clear();
        self.epoch = 0;
        self.round = 0;
        self.propose_hash.clear();
        self.validators.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PrevotesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PrevotesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct PeersRequest {
    // message fields
    pub to: ::protobuf::SingularPtrField<super::types::PublicKey>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PeersRequest {
    fn default() -> &'a PeersRequest {
        <PeersRequest as ::protobuf::Message>::default_instance()
    }
}

impl PeersRequest {
    pub fn new() -> PeersRequest {
        ::std::default::Default::default()
    }

    // .exonum.crypto.PublicKey to = 1;


    pub fn get_to(&self) -> &super::types::PublicKey {
        self.to.as_ref().unwrap_or_else(|| <super::types::PublicKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_to(&mut self) {
        self.to.clear();
    }

    pub fn has_to(&self) -> bool {
        self.to.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to(&mut self, v: super::types::PublicKey) {
        self.to = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to(&mut self) -> &mut super::types::PublicKey {
        if self.to.is_none() {
            self.to.set_default();
        }
        self.to.as_mut().unwrap()
    }

    // Take field
    pub fn take_to(&mut self) -> super::types::PublicKey {
        self.to.take().unwrap_or_else(|| super::types::PublicKey::new())
    }
}

impl ::protobuf::Message for PeersRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.to {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.to)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.to.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.to.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PeersRequest {
        PeersRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::PublicKey>>(
                "to",
                |m: &PeersRequest| { &m.to },
                |m: &mut PeersRequest| { &mut m.to },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PeersRequest>(
                "PeersRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PeersRequest {
        static instance: ::protobuf::rt::LazyV2<PeersRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PeersRequest::new)
    }
}

impl ::protobuf::Clear for PeersRequest {
    fn clear(&mut self) {
        self.to.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PeersRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeersRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct BlockRequest {
    // message fields
    pub to: ::protobuf::SingularPtrField<super::types::PublicKey>,
    pub height: u64,
    pub epoch: u64,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BlockRequest {
    fn default() -> &'a BlockRequest {
        <BlockRequest as ::protobuf::Message>::default_instance()
    }
}

impl BlockRequest {
    pub fn new() -> BlockRequest {
        ::std::default::Default::default()
    }

    // .exonum.crypto.PublicKey to = 1;


    pub fn get_to(&self) -> &super::types::PublicKey {
        self.to.as_ref().unwrap_or_else(|| <super::types::PublicKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_to(&mut self) {
        self.to.clear();
    }

    pub fn has_to(&self) -> bool {
        self.to.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to(&mut self, v: super::types::PublicKey) {
        self.to = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to(&mut self) -> &mut super::types::PublicKey {
        if self.to.is_none() {
            self.to.set_default();
        }
        self.to.as_mut().unwrap()
    }

    // Take field
    pub fn take_to(&mut self) -> super::types::PublicKey {
        self.to.take().unwrap_or_else(|| super::types::PublicKey::new())
    }

    // uint64 height = 2;


    pub fn get_height(&self) -> u64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: u64) {
        self.height = v;
    }

    // uint64 epoch = 3;


    pub fn get_epoch(&self) -> u64 {
        self.epoch
    }
    pub fn clear_epoch(&mut self) {
        self.epoch = 0;
    }

    // Param is passed by value, moved
    pub fn set_epoch(&mut self, v: u64) {
        self.epoch = v;
    }
}

impl ::protobuf::Message for BlockRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.to {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.to)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.height = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.epoch = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.to.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.epoch != 0 {
            my_size += ::protobuf::rt::value_size(3, self.epoch, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.to.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.height != 0 {
            os.write_uint64(2, self.height)?;
        }
        if self.epoch != 0 {
            os.write_uint64(3, self.epoch)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockRequest {
        BlockRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::PublicKey>>(
                "to",
                |m: &BlockRequest| { &m.to },
                |m: &mut BlockRequest| { &mut m.to },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "height",
                |m: &BlockRequest| { &m.height },
                |m: &mut BlockRequest| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "epoch",
                |m: &BlockRequest| { &m.epoch },
                |m: &mut BlockRequest| { &mut m.epoch },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BlockRequest>(
                "BlockRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BlockRequest {
        static instance: ::protobuf::rt::LazyV2<BlockRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BlockRequest::new)
    }
}

impl ::protobuf::Clear for BlockRequest {
    fn clear(&mut self) {
        self.to.clear();
        self.height = 0;
        self.epoch = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct PoolTransactionsRequest {
    // message fields
    pub to: ::protobuf::SingularPtrField<super::types::PublicKey>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PoolTransactionsRequest {
    fn default() -> &'a PoolTransactionsRequest {
        <PoolTransactionsRequest as ::protobuf::Message>::default_instance()
    }
}

impl PoolTransactionsRequest {
    pub fn new() -> PoolTransactionsRequest {
        ::std::default::Default::default()
    }

    // .exonum.crypto.PublicKey to = 1;


    pub fn get_to(&self) -> &super::types::PublicKey {
        self.to.as_ref().unwrap_or_else(|| <super::types::PublicKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_to(&mut self) {
        self.to.clear();
    }

    pub fn has_to(&self) -> bool {
        self.to.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to(&mut self, v: super::types::PublicKey) {
        self.to = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to(&mut self) -> &mut super::types::PublicKey {
        if self.to.is_none() {
            self.to.set_default();
        }
        self.to.as_mut().unwrap()
    }

    // Take field
    pub fn take_to(&mut self) -> super::types::PublicKey {
        self.to.take().unwrap_or_else(|| super::types::PublicKey::new())
    }
}

impl ::protobuf::Message for PoolTransactionsRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.to {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.to)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.to.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.to.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PoolTransactionsRequest {
        PoolTransactionsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::PublicKey>>(
                "to",
                |m: &PoolTransactionsRequest| { &m.to },
                |m: &mut PoolTransactionsRequest| { &mut m.to },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PoolTransactionsRequest>(
                "PoolTransactionsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PoolTransactionsRequest {
        static instance: ::protobuf::rt::LazyV2<PoolTransactionsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PoolTransactionsRequest::new)
    }
}

impl ::protobuf::Clear for PoolTransactionsRequest {
    fn clear(&mut self) {
        self.to.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PoolTransactionsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PoolTransactionsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ExonumMessage {
    // message oneof groups
    pub kind: ::std::option::Option<ExonumMessage_oneof_kind>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExonumMessage {
    fn default() -> &'a ExonumMessage {
        <ExonumMessage as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum ExonumMessage_oneof_kind {
    any_tx(super::base::AnyTx),
    precommit(super::messages::Precommit),
    status(Status),
    connect(Connect),
    propose(Propose),
    prevote(Prevote),
    transactions_response(TransactionsResponse),
    block_response(BlockResponse),
    propose_request(ProposeRequest),
    transactions_request(TransactionsRequest),
    prevotes_request(PrevotesRequest),
    peers_request(PeersRequest),
    block_request(BlockRequest),
    pool_transactions_request(PoolTransactionsRequest),
}

impl ExonumMessage {
    pub fn new() -> ExonumMessage {
        ::std::default::Default::default()
    }

    // .exonum.runtime.AnyTx any_tx = 1;


    pub fn get_any_tx(&self) -> &super::base::AnyTx {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::any_tx(ref v)) => v,
            _ => <super::base::AnyTx as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_any_tx(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_any_tx(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::any_tx(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_any_tx(&mut self, v: super::base::AnyTx) {
        self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::any_tx(v))
    }

    // Mutable pointer to the field.
    pub fn mut_any_tx(&mut self) -> &mut super::base::AnyTx {
        if let ::std::option::Option::Some(ExonumMessage_oneof_kind::any_tx(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::any_tx(super::base::AnyTx::new()));
        }
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::any_tx(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_any_tx(&mut self) -> super::base::AnyTx {
        if self.has_any_tx() {
            match self.kind.take() {
                ::std::option::Option::Some(ExonumMessage_oneof_kind::any_tx(v)) => v,
                _ => panic!(),
            }
        } else {
            super::base::AnyTx::new()
        }
    }

    // .exonum.Precommit precommit = 2;


    pub fn get_precommit(&self) -> &super::messages::Precommit {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::precommit(ref v)) => v,
            _ => <super::messages::Precommit as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_precommit(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_precommit(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::precommit(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_precommit(&mut self, v: super::messages::Precommit) {
        self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::precommit(v))
    }

    // Mutable pointer to the field.
    pub fn mut_precommit(&mut self) -> &mut super::messages::Precommit {
        if let ::std::option::Option::Some(ExonumMessage_oneof_kind::precommit(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::precommit(super::messages::Precommit::new()));
        }
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::precommit(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_precommit(&mut self) -> super::messages::Precommit {
        if self.has_precommit() {
            match self.kind.take() {
                ::std::option::Option::Some(ExonumMessage_oneof_kind::precommit(v)) => v,
                _ => panic!(),
            }
        } else {
            super::messages::Precommit::new()
        }
    }

    // .exonum.consensus.Status status = 3;


    pub fn get_status(&self) -> &Status {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::status(ref v)) => v,
            _ => <Status as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_status(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_status(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::status(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: Status) {
        self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::status(v))
    }

    // Mutable pointer to the field.
    pub fn mut_status(&mut self) -> &mut Status {
        if let ::std::option::Option::Some(ExonumMessage_oneof_kind::status(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::status(Status::new()));
        }
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::status(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_status(&mut self) -> Status {
        if self.has_status() {
            match self.kind.take() {
                ::std::option::Option::Some(ExonumMessage_oneof_kind::status(v)) => v,
                _ => panic!(),
            }
        } else {
            Status::new()
        }
    }

    // .exonum.consensus.Connect connect = 4;


    pub fn get_connect(&self) -> &Connect {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::connect(ref v)) => v,
            _ => <Connect as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_connect(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_connect(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::connect(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_connect(&mut self, v: Connect) {
        self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::connect(v))
    }

    // Mutable pointer to the field.
    pub fn mut_connect(&mut self) -> &mut Connect {
        if let ::std::option::Option::Some(ExonumMessage_oneof_kind::connect(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::connect(Connect::new()));
        }
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::connect(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_connect(&mut self) -> Connect {
        if self.has_connect() {
            match self.kind.take() {
                ::std::option::Option::Some(ExonumMessage_oneof_kind::connect(v)) => v,
                _ => panic!(),
            }
        } else {
            Connect::new()
        }
    }

    // .exonum.consensus.Propose propose = 5;


    pub fn get_propose(&self) -> &Propose {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::propose(ref v)) => v,
            _ => <Propose as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_propose(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_propose(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::propose(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_propose(&mut self, v: Propose) {
        self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::propose(v))
    }

    // Mutable pointer to the field.
    pub fn mut_propose(&mut self) -> &mut Propose {
        if let ::std::option::Option::Some(ExonumMessage_oneof_kind::propose(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::propose(Propose::new()));
        }
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::propose(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_propose(&mut self) -> Propose {
        if self.has_propose() {
            match self.kind.take() {
                ::std::option::Option::Some(ExonumMessage_oneof_kind::propose(v)) => v,
                _ => panic!(),
            }
        } else {
            Propose::new()
        }
    }

    // .exonum.consensus.Prevote prevote = 6;


    pub fn get_prevote(&self) -> &Prevote {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::prevote(ref v)) => v,
            _ => <Prevote as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_prevote(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_prevote(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::prevote(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_prevote(&mut self, v: Prevote) {
        self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::prevote(v))
    }

    // Mutable pointer to the field.
    pub fn mut_prevote(&mut self) -> &mut Prevote {
        if let ::std::option::Option::Some(ExonumMessage_oneof_kind::prevote(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::prevote(Prevote::new()));
        }
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::prevote(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_prevote(&mut self) -> Prevote {
        if self.has_prevote() {
            match self.kind.take() {
                ::std::option::Option::Some(ExonumMessage_oneof_kind::prevote(v)) => v,
                _ => panic!(),
            }
        } else {
            Prevote::new()
        }
    }

    // .exonum.consensus.TransactionsResponse transactions_response = 7;


    pub fn get_transactions_response(&self) -> &TransactionsResponse {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::transactions_response(ref v)) => v,
            _ => <TransactionsResponse as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_transactions_response(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_transactions_response(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::transactions_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_transactions_response(&mut self, v: TransactionsResponse) {
        self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::transactions_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_transactions_response(&mut self) -> &mut TransactionsResponse {
        if let ::std::option::Option::Some(ExonumMessage_oneof_kind::transactions_response(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::transactions_response(TransactionsResponse::new()));
        }
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::transactions_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_transactions_response(&mut self) -> TransactionsResponse {
        if self.has_transactions_response() {
            match self.kind.take() {
                ::std::option::Option::Some(ExonumMessage_oneof_kind::transactions_response(v)) => v,
                _ => panic!(),
            }
        } else {
            TransactionsResponse::new()
        }
    }

    // .exonum.consensus.BlockResponse block_response = 8;


    pub fn get_block_response(&self) -> &BlockResponse {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::block_response(ref v)) => v,
            _ => <BlockResponse as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_block_response(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_block_response(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::block_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_block_response(&mut self, v: BlockResponse) {
        self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::block_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_block_response(&mut self) -> &mut BlockResponse {
        if let ::std::option::Option::Some(ExonumMessage_oneof_kind::block_response(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::block_response(BlockResponse::new()));
        }
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::block_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_block_response(&mut self) -> BlockResponse {
        if self.has_block_response() {
            match self.kind.take() {
                ::std::option::Option::Some(ExonumMessage_oneof_kind::block_response(v)) => v,
                _ => panic!(),
            }
        } else {
            BlockResponse::new()
        }
    }

    // .exonum.consensus.ProposeRequest propose_request = 9;


    pub fn get_propose_request(&self) -> &ProposeRequest {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::propose_request(ref v)) => v,
            _ => <ProposeRequest as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_propose_request(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_propose_request(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::propose_request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_propose_request(&mut self, v: ProposeRequest) {
        self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::propose_request(v))
    }

    // Mutable pointer to the field.
    pub fn mut_propose_request(&mut self) -> &mut ProposeRequest {
        if let ::std::option::Option::Some(ExonumMessage_oneof_kind::propose_request(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::propose_request(ProposeRequest::new()));
        }
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::propose_request(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_propose_request(&mut self) -> ProposeRequest {
        if self.has_propose_request() {
            match self.kind.take() {
                ::std::option::Option::Some(ExonumMessage_oneof_kind::propose_request(v)) => v,
                _ => panic!(),
            }
        } else {
            ProposeRequest::new()
        }
    }

    // .exonum.consensus.TransactionsRequest transactions_request = 10;


    pub fn get_transactions_request(&self) -> &TransactionsRequest {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::transactions_request(ref v)) => v,
            _ => <TransactionsRequest as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_transactions_request(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_transactions_request(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::transactions_request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_transactions_request(&mut self, v: TransactionsRequest) {
        self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::transactions_request(v))
    }

    // Mutable pointer to the field.
    pub fn mut_transactions_request(&mut self) -> &mut TransactionsRequest {
        if let ::std::option::Option::Some(ExonumMessage_oneof_kind::transactions_request(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::transactions_request(TransactionsRequest::new()));
        }
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::transactions_request(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_transactions_request(&mut self) -> TransactionsRequest {
        if self.has_transactions_request() {
            match self.kind.take() {
                ::std::option::Option::Some(ExonumMessage_oneof_kind::transactions_request(v)) => v,
                _ => panic!(),
            }
        } else {
            TransactionsRequest::new()
        }
    }

    // .exonum.consensus.PrevotesRequest prevotes_request = 11;


    pub fn get_prevotes_request(&self) -> &PrevotesRequest {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::prevotes_request(ref v)) => v,
            _ => <PrevotesRequest as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_prevotes_request(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_prevotes_request(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::prevotes_request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_prevotes_request(&mut self, v: PrevotesRequest) {
        self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::prevotes_request(v))
    }

    // Mutable pointer to the field.
    pub fn mut_prevotes_request(&mut self) -> &mut PrevotesRequest {
        if let ::std::option::Option::Some(ExonumMessage_oneof_kind::prevotes_request(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::prevotes_request(PrevotesRequest::new()));
        }
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::prevotes_request(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_prevotes_request(&mut self) -> PrevotesRequest {
        if self.has_prevotes_request() {
            match self.kind.take() {
                ::std::option::Option::Some(ExonumMessage_oneof_kind::prevotes_request(v)) => v,
                _ => panic!(),
            }
        } else {
            PrevotesRequest::new()
        }
    }

    // .exonum.consensus.PeersRequest peers_request = 12;


    pub fn get_peers_request(&self) -> &PeersRequest {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::peers_request(ref v)) => v,
            _ => <PeersRequest as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_peers_request(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_peers_request(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::peers_request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_peers_request(&mut self, v: PeersRequest) {
        self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::peers_request(v))
    }

    // Mutable pointer to the field.
    pub fn mut_peers_request(&mut self) -> &mut PeersRequest {
        if let ::std::option::Option::Some(ExonumMessage_oneof_kind::peers_request(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::peers_request(PeersRequest::new()));
        }
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::peers_request(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_peers_request(&mut self) -> PeersRequest {
        if self.has_peers_request() {
            match self.kind.take() {
                ::std::option::Option::Some(ExonumMessage_oneof_kind::peers_request(v)) => v,
                _ => panic!(),
            }
        } else {
            PeersRequest::new()
        }
    }

    // .exonum.consensus.BlockRequest block_request = 13;


    pub fn get_block_request(&self) -> &BlockRequest {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::block_request(ref v)) => v,
            _ => <BlockRequest as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_block_request(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_block_request(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::block_request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_block_request(&mut self, v: BlockRequest) {
        self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::block_request(v))
    }

    // Mutable pointer to the field.
    pub fn mut_block_request(&mut self) -> &mut BlockRequest {
        if let ::std::option::Option::Some(ExonumMessage_oneof_kind::block_request(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::block_request(BlockRequest::new()));
        }
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::block_request(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_block_request(&mut self) -> BlockRequest {
        if self.has_block_request() {
            match self.kind.take() {
                ::std::option::Option::Some(ExonumMessage_oneof_kind::block_request(v)) => v,
                _ => panic!(),
            }
        } else {
            BlockRequest::new()
        }
    }

    // .exonum.consensus.PoolTransactionsRequest pool_transactions_request = 14;


    pub fn get_pool_transactions_request(&self) -> &PoolTransactionsRequest {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::pool_transactions_request(ref v)) => v,
            _ => <PoolTransactionsRequest as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_pool_transactions_request(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_pool_transactions_request(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::pool_transactions_request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pool_transactions_request(&mut self, v: PoolTransactionsRequest) {
        self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::pool_transactions_request(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pool_transactions_request(&mut self) -> &mut PoolTransactionsRequest {
        if let ::std::option::Option::Some(ExonumMessage_oneof_kind::pool_transactions_request(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::pool_transactions_request(PoolTransactionsRequest::new()));
        }
        match self.kind {
            ::std::option::Option::Some(ExonumMessage_oneof_kind::pool_transactions_request(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pool_transactions_request(&mut self) -> PoolTransactionsRequest {
        if self.has_pool_transactions_request() {
            match self.kind.take() {
                ::std::option::Option::Some(ExonumMessage_oneof_kind::pool_transactions_request(v)) => v,
                _ => panic!(),
            }
        } else {
            PoolTransactionsRequest::new()
        }
    }
}

impl ::protobuf::Message for ExonumMessage {
    fn is_initialized(&self) -> bool {
        if let Some(ExonumMessage_oneof_kind::any_tx(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ExonumMessage_oneof_kind::precommit(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ExonumMessage_oneof_kind::status(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ExonumMessage_oneof_kind::connect(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ExonumMessage_oneof_kind::propose(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ExonumMessage_oneof_kind::prevote(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ExonumMessage_oneof_kind::transactions_response(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ExonumMessage_oneof_kind::block_response(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ExonumMessage_oneof_kind::propose_request(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ExonumMessage_oneof_kind::transactions_request(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ExonumMessage_oneof_kind::prevotes_request(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ExonumMessage_oneof_kind::peers_request(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ExonumMessage_oneof_kind::block_request(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ExonumMessage_oneof_kind::pool_transactions_request(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::any_tx(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::precommit(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::status(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::connect(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::propose(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::prevote(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::transactions_response(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::block_response(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::propose_request(is.read_message()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::transactions_request(is.read_message()?));
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::prevotes_request(is.read_message()?));
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::peers_request(is.read_message()?));
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::block_request(is.read_message()?));
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(ExonumMessage_oneof_kind::pool_transactions_request(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.kind {
            match v {
                &ExonumMessage_oneof_kind::any_tx(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ExonumMessage_oneof_kind::precommit(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ExonumMessage_oneof_kind::status(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ExonumMessage_oneof_kind::connect(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ExonumMessage_oneof_kind::propose(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ExonumMessage_oneof_kind::prevote(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ExonumMessage_oneof_kind::transactions_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ExonumMessage_oneof_kind::block_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ExonumMessage_oneof_kind::propose_request(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ExonumMessage_oneof_kind::transactions_request(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ExonumMessage_oneof_kind::prevotes_request(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ExonumMessage_oneof_kind::peers_request(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ExonumMessage_oneof_kind::block_request(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ExonumMessage_oneof_kind::pool_transactions_request(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.kind {
            match v {
                &ExonumMessage_oneof_kind::any_tx(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ExonumMessage_oneof_kind::precommit(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ExonumMessage_oneof_kind::status(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ExonumMessage_oneof_kind::connect(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ExonumMessage_oneof_kind::propose(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ExonumMessage_oneof_kind::prevote(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ExonumMessage_oneof_kind::transactions_response(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ExonumMessage_oneof_kind::block_response(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ExonumMessage_oneof_kind::propose_request(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ExonumMessage_oneof_kind::transactions_request(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ExonumMessage_oneof_kind::prevotes_request(ref v) => {
                    os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ExonumMessage_oneof_kind::peers_request(ref v) => {
                    os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ExonumMessage_oneof_kind::block_request(ref v) => {
                    os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ExonumMessage_oneof_kind::pool_transactions_request(ref v) => {
                    os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExonumMessage {
        ExonumMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::base::AnyTx>(
                "any_tx",
                ExonumMessage::has_any_tx,
                ExonumMessage::get_any_tx,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::messages::Precommit>(
                "precommit",
                ExonumMessage::has_precommit,
                ExonumMessage::get_precommit,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Status>(
                "status",
                ExonumMessage::has_status,
                ExonumMessage::get_status,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Connect>(
                "connect",
                ExonumMessage::has_connect,
                ExonumMessage::get_connect,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Propose>(
                "propose",
                ExonumMessage::has_propose,
                ExonumMessage::get_propose,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Prevote>(
                "prevote",
                ExonumMessage::has_prevote,
                ExonumMessage::get_prevote,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, TransactionsResponse>(
                "transactions_response",
                ExonumMessage::has_transactions_response,
                ExonumMessage::get_transactions_response,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, BlockResponse>(
                "block_response",
                ExonumMessage::has_block_response,
                ExonumMessage::get_block_response,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ProposeRequest>(
                "propose_request",
                ExonumMessage::has_propose_request,
                ExonumMessage::get_propose_request,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, TransactionsRequest>(
                "transactions_request",
                ExonumMessage::has_transactions_request,
                ExonumMessage::get_transactions_request,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, PrevotesRequest>(
                "prevotes_request",
                ExonumMessage::has_prevotes_request,
                ExonumMessage::get_prevotes_request,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, PeersRequest>(
                "peers_request",
                ExonumMessage::has_peers_request,
                ExonumMessage::get_peers_request,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, BlockRequest>(
                "block_request",
                ExonumMessage::has_block_request,
                ExonumMessage::get_block_request,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, PoolTransactionsRequest>(
                "pool_transactions_request",
                ExonumMessage::has_pool_transactions_request,
                ExonumMessage::get_pool_transactions_request,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ExonumMessage>(
                "ExonumMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ExonumMessage {
        static instance: ::protobuf::rt::LazyV2<ExonumMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ExonumMessage::new)
    }
}

impl ::protobuf::Clear for ExonumMessage {
    fn clear(&mut self) {
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExonumMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExonumMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fconsensus.proto\x12\x10exonum.consensus\x1a\x19exonum/crypto/types\
    .proto\x1a\x1bexonum/common/bit_vec.proto\x1a\x17exonum/blockchain.proto\
    \x1a\x15exonum/messages.proto\x1a\x19exonum/runtime/base.proto\x1a\x1fgo\
    ogle/protobuf/timestamp.proto\"l\n\x07Connect\x12\x12\n\x04host\x18\x01\
    \x20\x01(\tR\x04host\x12.\n\x04time\x18\x02\x20\x01(\x0b2\x1a.google.pro\
    tobuf.TimestampR\x04time\x12\x1d\n\nuser_agent\x18\x03\x20\x01(\tR\tuser\
    Agent\"\x9a\x01\n\x06Status\x12\x14\n\x05epoch\x18\x01\x20\x01(\x04R\x05\
    epoch\x120\n\tlast_hash\x18\x02\x20\x01(\x0b2\x13.exonum.crypto.HashR\
    \x08lastHash\x12\x1b\n\tpool_size\x18\x03\x20\x01(\x04R\x08poolSize\x12+\
    \n\x11blockchain_height\x18\x04\x20\x01(\x04R\x10blockchainHeight\"\xd2\
    \x01\n\x07Propose\x12\x1c\n\tvalidator\x18\x01\x20\x01(\rR\tvalidator\
    \x12\x14\n\x05epoch\x18\x02\x20\x01(\x04R\x05epoch\x12\x14\n\x05round\
    \x18\x03\x20\x01(\rR\x05round\x120\n\tprev_hash\x18\x04\x20\x01(\x0b2\
    \x13.exonum.crypto.HashR\x08prevHash\x127\n\x0ctransactions\x18\x05\x20\
    \x03(\x0b2\x13.exonum.crypto.HashR\x0ctransactions\x12\x12\n\x04skip\x18\
    \x06\x20\x01(\x08R\x04skip\"\xae\x01\n\x07Prevote\x12\x1c\n\tvalidator\
    \x18\x01\x20\x01(\rR\tvalidator\x12\x14\n\x05epoch\x18\x02\x20\x01(\x04R\
    \x05epoch\x12\x14\n\x05round\x18\x03\x20\x01(\rR\x05round\x126\n\x0cprop\
    ose_hash\x18\x04\x20\x01(\x0b2\x13.exonum.crypto.HashR\x0bproposeHash\
    \x12!\n\x0clocked_round\x18\x05\x20\x01(\rR\x0blockedRound\"\xb7\x01\n\r\
    BlockResponse\x12(\n\x02to\x18\x01\x20\x01(\x0b2\x18.exonum.crypto.Publi\
    cKeyR\x02to\x12#\n\x05block\x18\x02\x20\x01(\x0b2\r.exonum.BlockR\x05blo\
    ck\x12\x1e\n\nprecommits\x18\x03\x20\x03(\x0cR\nprecommits\x127\n\x0ctra\
    nsactions\x18\x04\x20\x03(\x0b2\x13.exonum.crypto.HashR\x0ctransactions\
    \"d\n\x14TransactionsResponse\x12(\n\x02to\x18\x01\x20\x01(\x0b2\x18.exo\
    num.crypto.PublicKeyR\x02to\x12\"\n\x0ctransactions\x18\x02\x20\x03(\x0c\
    R\x0ctransactions\"\x88\x01\n\x0eProposeRequest\x12(\n\x02to\x18\x01\x20\
    \x01(\x0b2\x18.exonum.crypto.PublicKeyR\x02to\x12\x14\n\x05epoch\x18\x02\
    \x20\x01(\x04R\x05epoch\x126\n\x0cpropose_hash\x18\x03\x20\x01(\x0b2\x13\
    .exonum.crypto.HashR\x0bproposeHash\"f\n\x13TransactionsRequest\x12(\n\
    \x02to\x18\x01\x20\x01(\x0b2\x18.exonum.crypto.PublicKeyR\x02to\x12%\n\
    \x03txs\x18\x02\x20\x03(\x0b2\x13.exonum.crypto.HashR\x03txs\"\xd6\x01\n\
    \x0fPrevotesRequest\x12(\n\x02to\x18\x01\x20\x01(\x0b2\x18.exonum.crypto\
    .PublicKeyR\x02to\x12\x14\n\x05epoch\x18\x02\x20\x01(\x04R\x05epoch\x12\
    \x14\n\x05round\x18\x03\x20\x01(\rR\x05round\x126\n\x0cpropose_hash\x18\
    \x04\x20\x01(\x0b2\x13.exonum.crypto.HashR\x0bproposeHash\x125\n\nvalida\
    tors\x18\x05\x20\x01(\x0b2\x15.exonum.common.BitVecR\nvalidators\"8\n\
    \x0cPeersRequest\x12(\n\x02to\x18\x01\x20\x01(\x0b2\x18.exonum.crypto.Pu\
    blicKeyR\x02to\"f\n\x0cBlockRequest\x12(\n\x02to\x18\x01\x20\x01(\x0b2\
    \x18.exonum.crypto.PublicKeyR\x02to\x12\x16\n\x06height\x18\x02\x20\x01(\
    \x04R\x06height\x12\x14\n\x05epoch\x18\x03\x20\x01(\x04R\x05epoch\"C\n\
    \x17PoolTransactionsRequest\x12(\n\x02to\x18\x01\x20\x01(\x0b2\x18.exonu\
    m.crypto.PublicKeyR\x02to\"\xec\x07\n\rExonumMessage\x12.\n\x06any_tx\
    \x18\x01\x20\x01(\x0b2\x15.exonum.runtime.AnyTxH\0R\x05anyTx\x121\n\tpre\
    commit\x18\x02\x20\x01(\x0b2\x11.exonum.PrecommitH\0R\tprecommit\x122\n\
    \x06status\x18\x03\x20\x01(\x0b2\x18.exonum.consensus.StatusH\0R\x06stat\
    us\x125\n\x07connect\x18\x04\x20\x01(\x0b2\x19.exonum.consensus.ConnectH\
    \0R\x07connect\x125\n\x07propose\x18\x05\x20\x01(\x0b2\x19.exonum.consen\
    sus.ProposeH\0R\x07propose\x125\n\x07prevote\x18\x06\x20\x01(\x0b2\x19.e\
    xonum.consensus.PrevoteH\0R\x07prevote\x12]\n\x15transactions_response\
    \x18\x07\x20\x01(\x0b2&.exonum.consensus.TransactionsResponseH\0R\x14tra\
    nsactionsResponse\x12H\n\x0eblock_response\x18\x08\x20\x01(\x0b2\x1f.exo\
    num.consensus.BlockResponseH\0R\rblockResponse\x12K\n\x0fpropose_request\
    \x18\t\x20\x01(\x0b2\x20.exonum.consensus.ProposeRequestH\0R\x0eproposeR\
    equest\x12Z\n\x14transactions_request\x18\n\x20\x01(\x0b2%.exonum.consen\
    sus.TransactionsRequestH\0R\x13transactionsRequest\x12N\n\x10prevotes_re\
    quest\x18\x0b\x20\x01(\x0b2!.exonum.consensus.PrevotesRequestH\0R\x0fpre\
    votesRequest\x12E\n\rpeers_request\x18\x0c\x20\x01(\x0b2\x1e.exonum.cons\
    ensus.PeersRequestH\0R\x0cpeersRequest\x12E\n\rblock_request\x18\r\x20\
    \x01(\x0b2\x1e.exonum.consensus.BlockRequestH\0R\x0cblockRequest\x12g\n\
    \x19pool_transactions_request\x18\x0e\x20\x01(\x0b2).exonum.consensus.Po\
    olTransactionsRequestH\0R\x17poolTransactionsRequestB\x06\n\x04kindB\x1f\
    \n\x1dcom.exonum.messages.consensusb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
