// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `message.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct SimpleMessage {
    // message fields
    pub id: u32,
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SimpleMessage {
    fn default() -> &'a SimpleMessage {
        <SimpleMessage as ::protobuf::Message>::default_instance()
    }
}

impl SimpleMessage {
    pub fn new() -> SimpleMessage {
        ::std::default::Default::default()
    }

    // uint32 id = 1;


    pub fn get_id(&self) -> u32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SimpleMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SimpleMessage {
        SimpleMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "id",
                |m: &SimpleMessage| { &m.id },
                |m: &mut SimpleMessage| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &SimpleMessage| { &m.name },
                |m: &mut SimpleMessage| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SimpleMessage>(
                "SimpleMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SimpleMessage {
        static instance: ::protobuf::rt::LazyV2<SimpleMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SimpleMessage::new)
    }
}

impl ::protobuf::Clear for SimpleMessage {
    fn clear(&mut self) {
        self.id = 0;
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SimpleMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SimpleMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SkipFieldsMessage {
    // message fields
    pub id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SkipFieldsMessage {
    fn default() -> &'a SkipFieldsMessage {
        <SkipFieldsMessage as ::protobuf::Message>::default_instance()
    }
}

impl SkipFieldsMessage {
    pub fn new() -> SkipFieldsMessage {
        ::std::default::Default::default()
    }

    // uint32 id = 1;


    pub fn get_id(&self) -> u32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }
}

impl ::protobuf::Message for SkipFieldsMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SkipFieldsMessage {
        SkipFieldsMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "id",
                |m: &SkipFieldsMessage| { &m.id },
                |m: &mut SkipFieldsMessage| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SkipFieldsMessage>(
                "SkipFieldsMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SkipFieldsMessage {
        static instance: ::protobuf::rt::LazyV2<SkipFieldsMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SkipFieldsMessage::new)
    }
}

impl ::protobuf::Clear for SkipFieldsMessage {
    fn clear(&mut self) {
        self.id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SkipFieldsMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SkipFieldsMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EnumMessage {
    // message oneof groups
    pub kind: ::std::option::Option<EnumMessage_oneof_kind>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EnumMessage {
    fn default() -> &'a EnumMessage {
        <EnumMessage as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum EnumMessage_oneof_kind {
    simple(SimpleMessage),
    skip(SkipFieldsMessage),
}

impl EnumMessage {
    pub fn new() -> EnumMessage {
        ::std::default::Default::default()
    }

    // .SimpleMessage simple = 1;


    pub fn get_simple(&self) -> &SimpleMessage {
        match self.kind {
            ::std::option::Option::Some(EnumMessage_oneof_kind::simple(ref v)) => v,
            _ => <SimpleMessage as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_simple(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_simple(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(EnumMessage_oneof_kind::simple(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_simple(&mut self, v: SimpleMessage) {
        self.kind = ::std::option::Option::Some(EnumMessage_oneof_kind::simple(v))
    }

    // Mutable pointer to the field.
    pub fn mut_simple(&mut self) -> &mut SimpleMessage {
        if let ::std::option::Option::Some(EnumMessage_oneof_kind::simple(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(EnumMessage_oneof_kind::simple(SimpleMessage::new()));
        }
        match self.kind {
            ::std::option::Option::Some(EnumMessage_oneof_kind::simple(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_simple(&mut self) -> SimpleMessage {
        if self.has_simple() {
            match self.kind.take() {
                ::std::option::Option::Some(EnumMessage_oneof_kind::simple(v)) => v,
                _ => panic!(),
            }
        } else {
            SimpleMessage::new()
        }
    }

    // .SkipFieldsMessage skip = 2;


    pub fn get_skip(&self) -> &SkipFieldsMessage {
        match self.kind {
            ::std::option::Option::Some(EnumMessage_oneof_kind::skip(ref v)) => v,
            _ => <SkipFieldsMessage as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_skip(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_skip(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(EnumMessage_oneof_kind::skip(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_skip(&mut self, v: SkipFieldsMessage) {
        self.kind = ::std::option::Option::Some(EnumMessage_oneof_kind::skip(v))
    }

    // Mutable pointer to the field.
    pub fn mut_skip(&mut self) -> &mut SkipFieldsMessage {
        if let ::std::option::Option::Some(EnumMessage_oneof_kind::skip(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(EnumMessage_oneof_kind::skip(SkipFieldsMessage::new()));
        }
        match self.kind {
            ::std::option::Option::Some(EnumMessage_oneof_kind::skip(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_skip(&mut self) -> SkipFieldsMessage {
        if self.has_skip() {
            match self.kind.take() {
                ::std::option::Option::Some(EnumMessage_oneof_kind::skip(v)) => v,
                _ => panic!(),
            }
        } else {
            SkipFieldsMessage::new()
        }
    }
}

impl ::protobuf::Message for EnumMessage {
    fn is_initialized(&self) -> bool {
        if let Some(EnumMessage_oneof_kind::simple(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(EnumMessage_oneof_kind::skip(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(EnumMessage_oneof_kind::simple(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(EnumMessage_oneof_kind::skip(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.kind {
            match v {
                &EnumMessage_oneof_kind::simple(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &EnumMessage_oneof_kind::skip(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.kind {
            match v {
                &EnumMessage_oneof_kind::simple(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &EnumMessage_oneof_kind::skip(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EnumMessage {
        EnumMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SimpleMessage>(
                "simple",
                EnumMessage::has_simple,
                EnumMessage::get_simple,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SkipFieldsMessage>(
                "skip",
                EnumMessage::has_skip,
                EnumMessage::get_skip,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EnumMessage>(
                "EnumMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EnumMessage {
        static instance: ::protobuf::rt::LazyV2<EnumMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EnumMessage::new)
    }
}

impl ::protobuf::Clear for EnumMessage {
    fn clear(&mut self) {
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EnumMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnumMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EnumMessageWithSimilarFields {
    // message oneof groups
    pub kind: ::std::option::Option<EnumMessageWithSimilarFields_oneof_kind>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EnumMessageWithSimilarFields {
    fn default() -> &'a EnumMessageWithSimilarFields {
        <EnumMessageWithSimilarFields as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum EnumMessageWithSimilarFields_oneof_kind {
    simple(SimpleMessage),
    skip(SimpleMessage),
}

impl EnumMessageWithSimilarFields {
    pub fn new() -> EnumMessageWithSimilarFields {
        ::std::default::Default::default()
    }

    // .SimpleMessage simple = 1;


    pub fn get_simple(&self) -> &SimpleMessage {
        match self.kind {
            ::std::option::Option::Some(EnumMessageWithSimilarFields_oneof_kind::simple(ref v)) => v,
            _ => <SimpleMessage as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_simple(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_simple(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(EnumMessageWithSimilarFields_oneof_kind::simple(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_simple(&mut self, v: SimpleMessage) {
        self.kind = ::std::option::Option::Some(EnumMessageWithSimilarFields_oneof_kind::simple(v))
    }

    // Mutable pointer to the field.
    pub fn mut_simple(&mut self) -> &mut SimpleMessage {
        if let ::std::option::Option::Some(EnumMessageWithSimilarFields_oneof_kind::simple(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(EnumMessageWithSimilarFields_oneof_kind::simple(SimpleMessage::new()));
        }
        match self.kind {
            ::std::option::Option::Some(EnumMessageWithSimilarFields_oneof_kind::simple(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_simple(&mut self) -> SimpleMessage {
        if self.has_simple() {
            match self.kind.take() {
                ::std::option::Option::Some(EnumMessageWithSimilarFields_oneof_kind::simple(v)) => v,
                _ => panic!(),
            }
        } else {
            SimpleMessage::new()
        }
    }

    // .SimpleMessage skip = 2;


    pub fn get_skip(&self) -> &SimpleMessage {
        match self.kind {
            ::std::option::Option::Some(EnumMessageWithSimilarFields_oneof_kind::skip(ref v)) => v,
            _ => <SimpleMessage as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_skip(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_skip(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(EnumMessageWithSimilarFields_oneof_kind::skip(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_skip(&mut self, v: SimpleMessage) {
        self.kind = ::std::option::Option::Some(EnumMessageWithSimilarFields_oneof_kind::skip(v))
    }

    // Mutable pointer to the field.
    pub fn mut_skip(&mut self) -> &mut SimpleMessage {
        if let ::std::option::Option::Some(EnumMessageWithSimilarFields_oneof_kind::skip(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(EnumMessageWithSimilarFields_oneof_kind::skip(SimpleMessage::new()));
        }
        match self.kind {
            ::std::option::Option::Some(EnumMessageWithSimilarFields_oneof_kind::skip(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_skip(&mut self) -> SimpleMessage {
        if self.has_skip() {
            match self.kind.take() {
                ::std::option::Option::Some(EnumMessageWithSimilarFields_oneof_kind::skip(v)) => v,
                _ => panic!(),
            }
        } else {
            SimpleMessage::new()
        }
    }
}

impl ::protobuf::Message for EnumMessageWithSimilarFields {
    fn is_initialized(&self) -> bool {
        if let Some(EnumMessageWithSimilarFields_oneof_kind::simple(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(EnumMessageWithSimilarFields_oneof_kind::skip(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(EnumMessageWithSimilarFields_oneof_kind::simple(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(EnumMessageWithSimilarFields_oneof_kind::skip(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.kind {
            match v {
                &EnumMessageWithSimilarFields_oneof_kind::simple(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &EnumMessageWithSimilarFields_oneof_kind::skip(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.kind {
            match v {
                &EnumMessageWithSimilarFields_oneof_kind::simple(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &EnumMessageWithSimilarFields_oneof_kind::skip(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EnumMessageWithSimilarFields {
        EnumMessageWithSimilarFields::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SimpleMessage>(
                "simple",
                EnumMessageWithSimilarFields::has_simple,
                EnumMessageWithSimilarFields::get_simple,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SimpleMessage>(
                "skip",
                EnumMessageWithSimilarFields::has_skip,
                EnumMessageWithSimilarFields::get_skip,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EnumMessageWithSimilarFields>(
                "EnumMessageWithSimilarFields",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EnumMessageWithSimilarFields {
        static instance: ::protobuf::rt::LazyV2<EnumMessageWithSimilarFields> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EnumMessageWithSimilarFields::new)
    }
}

impl ::protobuf::Clear for EnumMessageWithSimilarFields {
    fn clear(&mut self) {
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EnumMessageWithSimilarFields {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnumMessageWithSimilarFields {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EnumMessageWithUpperCaseField {
    // message oneof groups
    pub kind: ::std::option::Option<EnumMessageWithUpperCaseField_oneof_kind>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EnumMessageWithUpperCaseField {
    fn default() -> &'a EnumMessageWithUpperCaseField {
        <EnumMessageWithUpperCaseField as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum EnumMessageWithUpperCaseField_oneof_kind {
    Simple(SimpleMessage),
}

impl EnumMessageWithUpperCaseField {
    pub fn new() -> EnumMessageWithUpperCaseField {
        ::std::default::Default::default()
    }

    // .SimpleMessage Simple = 1;


    pub fn get_Simple(&self) -> &SimpleMessage {
        match self.kind {
            ::std::option::Option::Some(EnumMessageWithUpperCaseField_oneof_kind::Simple(ref v)) => v,
            _ => <SimpleMessage as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_Simple(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_Simple(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(EnumMessageWithUpperCaseField_oneof_kind::Simple(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Simple(&mut self, v: SimpleMessage) {
        self.kind = ::std::option::Option::Some(EnumMessageWithUpperCaseField_oneof_kind::Simple(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Simple(&mut self) -> &mut SimpleMessage {
        if let ::std::option::Option::Some(EnumMessageWithUpperCaseField_oneof_kind::Simple(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(EnumMessageWithUpperCaseField_oneof_kind::Simple(SimpleMessage::new()));
        }
        match self.kind {
            ::std::option::Option::Some(EnumMessageWithUpperCaseField_oneof_kind::Simple(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Simple(&mut self) -> SimpleMessage {
        if self.has_Simple() {
            match self.kind.take() {
                ::std::option::Option::Some(EnumMessageWithUpperCaseField_oneof_kind::Simple(v)) => v,
                _ => panic!(),
            }
        } else {
            SimpleMessage::new()
        }
    }
}

impl ::protobuf::Message for EnumMessageWithUpperCaseField {
    fn is_initialized(&self) -> bool {
        if let Some(EnumMessageWithUpperCaseField_oneof_kind::Simple(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(EnumMessageWithUpperCaseField_oneof_kind::Simple(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.kind {
            match v {
                &EnumMessageWithUpperCaseField_oneof_kind::Simple(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.kind {
            match v {
                &EnumMessageWithUpperCaseField_oneof_kind::Simple(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EnumMessageWithUpperCaseField {
        EnumMessageWithUpperCaseField::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SimpleMessage>(
                "Simple",
                EnumMessageWithUpperCaseField::has_Simple,
                EnumMessageWithUpperCaseField::get_Simple,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EnumMessageWithUpperCaseField>(
                "EnumMessageWithUpperCaseField",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EnumMessageWithUpperCaseField {
        static instance: ::protobuf::rt::LazyV2<EnumMessageWithUpperCaseField> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EnumMessageWithUpperCaseField::new)
    }
}

impl ::protobuf::Clear for EnumMessageWithUpperCaseField {
    fn clear(&mut self) {
        self.kind = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EnumMessageWithUpperCaseField {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnumMessageWithUpperCaseField {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rmessage.proto\"3\n\rSimpleMessage\x12\x0e\n\x02id\x18\x01\x20\x01(\r\
    R\x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\"#\n\x11SkipFields\
    Message\x12\x0e\n\x02id\x18\x01\x20\x01(\rR\x02id\"i\n\x0bEnumMessage\
    \x12(\n\x06simple\x18\x01\x20\x01(\x0b2\x0e.SimpleMessageH\0R\x06simple\
    \x12(\n\x04skip\x18\x02\x20\x01(\x0b2\x12.SkipFieldsMessageH\0R\x04skipB\
    \x06\n\x04kind\"v\n\x1cEnumMessageWithSimilarFields\x12(\n\x06simple\x18\
    \x01\x20\x01(\x0b2\x0e.SimpleMessageH\0R\x06simple\x12$\n\x04skip\x18\
    \x02\x20\x01(\x0b2\x0e.SimpleMessageH\0R\x04skipB\x06\n\x04kind\"Q\n\x1d\
    EnumMessageWithUpperCaseField\x12(\n\x06Simple\x18\x01\x20\x01(\x0b2\x0e\
    .SimpleMessageH\0R\x06SimpleB\x06\n\x04kindb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
